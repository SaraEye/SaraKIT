// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/assistant/embedded/v1alpha2/embedded_assistant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/type/latlng.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
namespace google {
namespace assistant {
namespace embedded {
namespace v1alpha2 {
class AssistConfig;
struct AssistConfigDefaultTypeInternal;
extern AssistConfigDefaultTypeInternal _AssistConfig_default_instance_;
class AssistRequest;
struct AssistRequestDefaultTypeInternal;
extern AssistRequestDefaultTypeInternal _AssistRequest_default_instance_;
class AssistResponse;
struct AssistResponseDefaultTypeInternal;
extern AssistResponseDefaultTypeInternal _AssistResponse_default_instance_;
class AudioInConfig;
struct AudioInConfigDefaultTypeInternal;
extern AudioInConfigDefaultTypeInternal _AudioInConfig_default_instance_;
class AudioOut;
struct AudioOutDefaultTypeInternal;
extern AudioOutDefaultTypeInternal _AudioOut_default_instance_;
class AudioOutConfig;
struct AudioOutConfigDefaultTypeInternal;
extern AudioOutConfigDefaultTypeInternal _AudioOutConfig_default_instance_;
class DebugConfig;
struct DebugConfigDefaultTypeInternal;
extern DebugConfigDefaultTypeInternal _DebugConfig_default_instance_;
class DebugInfo;
struct DebugInfoDefaultTypeInternal;
extern DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
class DeviceAction;
struct DeviceActionDefaultTypeInternal;
extern DeviceActionDefaultTypeInternal _DeviceAction_default_instance_;
class DeviceConfig;
struct DeviceConfigDefaultTypeInternal;
extern DeviceConfigDefaultTypeInternal _DeviceConfig_default_instance_;
class DeviceLocation;
struct DeviceLocationDefaultTypeInternal;
extern DeviceLocationDefaultTypeInternal _DeviceLocation_default_instance_;
class DialogStateIn;
struct DialogStateInDefaultTypeInternal;
extern DialogStateInDefaultTypeInternal _DialogStateIn_default_instance_;
class DialogStateOut;
struct DialogStateOutDefaultTypeInternal;
extern DialogStateOutDefaultTypeInternal _DialogStateOut_default_instance_;
class ScreenOut;
struct ScreenOutDefaultTypeInternal;
extern ScreenOutDefaultTypeInternal _ScreenOut_default_instance_;
class ScreenOutConfig;
struct ScreenOutConfigDefaultTypeInternal;
extern ScreenOutConfigDefaultTypeInternal _ScreenOutConfig_default_instance_;
class SpeechRecognitionResult;
struct SpeechRecognitionResultDefaultTypeInternal;
extern SpeechRecognitionResultDefaultTypeInternal _SpeechRecognitionResult_default_instance_;
}  // namespace v1alpha2
}  // namespace embedded
}  // namespace assistant
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::assistant::embedded::v1alpha2::AssistConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AssistConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::AssistRequest* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AssistRequest>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::AssistResponse* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AssistResponse>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::AudioInConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AudioInConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::AudioOut* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AudioOut>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::AudioOutConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AudioOutConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DebugConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DebugConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DebugInfo* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DebugInfo>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DeviceAction* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceAction>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DeviceConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DeviceLocation* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceLocation>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DialogStateIn* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DialogStateIn>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DialogStateOut* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DialogStateOut>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::ScreenOut* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::ScreenOut>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::ScreenOutConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::ScreenOutConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::SpeechRecognitionResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace assistant {
namespace embedded {
namespace v1alpha2 {

enum AssistResponse_EventType : int {
  AssistResponse_EventType_EVENT_TYPE_UNSPECIFIED = 0,
  AssistResponse_EventType_END_OF_UTTERANCE = 1,
  AssistResponse_EventType_AssistResponse_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AssistResponse_EventType_AssistResponse_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AssistResponse_EventType_IsValid(int value);
constexpr AssistResponse_EventType AssistResponse_EventType_EventType_MIN = AssistResponse_EventType_EVENT_TYPE_UNSPECIFIED;
constexpr AssistResponse_EventType AssistResponse_EventType_EventType_MAX = AssistResponse_EventType_END_OF_UTTERANCE;
constexpr int AssistResponse_EventType_EventType_ARRAYSIZE = AssistResponse_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AssistResponse_EventType_descriptor();
template<typename T>
inline const std::string& AssistResponse_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AssistResponse_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AssistResponse_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AssistResponse_EventType_descriptor(), enum_t_value);
}
inline bool AssistResponse_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AssistResponse_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AssistResponse_EventType>(
    AssistResponse_EventType_descriptor(), name, value);
}
enum AudioInConfig_Encoding : int {
  AudioInConfig_Encoding_ENCODING_UNSPECIFIED = 0,
  AudioInConfig_Encoding_LINEAR16 = 1,
  AudioInConfig_Encoding_FLAC = 2,
  AudioInConfig_Encoding_AudioInConfig_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AudioInConfig_Encoding_AudioInConfig_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AudioInConfig_Encoding_IsValid(int value);
constexpr AudioInConfig_Encoding AudioInConfig_Encoding_Encoding_MIN = AudioInConfig_Encoding_ENCODING_UNSPECIFIED;
constexpr AudioInConfig_Encoding AudioInConfig_Encoding_Encoding_MAX = AudioInConfig_Encoding_FLAC;
constexpr int AudioInConfig_Encoding_Encoding_ARRAYSIZE = AudioInConfig_Encoding_Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioInConfig_Encoding_descriptor();
template<typename T>
inline const std::string& AudioInConfig_Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioInConfig_Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioInConfig_Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioInConfig_Encoding_descriptor(), enum_t_value);
}
inline bool AudioInConfig_Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioInConfig_Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioInConfig_Encoding>(
    AudioInConfig_Encoding_descriptor(), name, value);
}
enum AudioOutConfig_Encoding : int {
  AudioOutConfig_Encoding_ENCODING_UNSPECIFIED = 0,
  AudioOutConfig_Encoding_LINEAR16 = 1,
  AudioOutConfig_Encoding_MP3 = 2,
  AudioOutConfig_Encoding_OPUS_IN_OGG = 3,
  AudioOutConfig_Encoding_AudioOutConfig_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AudioOutConfig_Encoding_AudioOutConfig_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AudioOutConfig_Encoding_IsValid(int value);
constexpr AudioOutConfig_Encoding AudioOutConfig_Encoding_Encoding_MIN = AudioOutConfig_Encoding_ENCODING_UNSPECIFIED;
constexpr AudioOutConfig_Encoding AudioOutConfig_Encoding_Encoding_MAX = AudioOutConfig_Encoding_OPUS_IN_OGG;
constexpr int AudioOutConfig_Encoding_Encoding_ARRAYSIZE = AudioOutConfig_Encoding_Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioOutConfig_Encoding_descriptor();
template<typename T>
inline const std::string& AudioOutConfig_Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioOutConfig_Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioOutConfig_Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioOutConfig_Encoding_descriptor(), enum_t_value);
}
inline bool AudioOutConfig_Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioOutConfig_Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioOutConfig_Encoding>(
    AudioOutConfig_Encoding_descriptor(), name, value);
}
enum ScreenOutConfig_ScreenMode : int {
  ScreenOutConfig_ScreenMode_SCREEN_MODE_UNSPECIFIED = 0,
  ScreenOutConfig_ScreenMode_OFF = 1,
  ScreenOutConfig_ScreenMode_PLAYING = 3,
  ScreenOutConfig_ScreenMode_ScreenOutConfig_ScreenMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ScreenOutConfig_ScreenMode_ScreenOutConfig_ScreenMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ScreenOutConfig_ScreenMode_IsValid(int value);
constexpr ScreenOutConfig_ScreenMode ScreenOutConfig_ScreenMode_ScreenMode_MIN = ScreenOutConfig_ScreenMode_SCREEN_MODE_UNSPECIFIED;
constexpr ScreenOutConfig_ScreenMode ScreenOutConfig_ScreenMode_ScreenMode_MAX = ScreenOutConfig_ScreenMode_PLAYING;
constexpr int ScreenOutConfig_ScreenMode_ScreenMode_ARRAYSIZE = ScreenOutConfig_ScreenMode_ScreenMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScreenOutConfig_ScreenMode_descriptor();
template<typename T>
inline const std::string& ScreenOutConfig_ScreenMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScreenOutConfig_ScreenMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScreenOutConfig_ScreenMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScreenOutConfig_ScreenMode_descriptor(), enum_t_value);
}
inline bool ScreenOutConfig_ScreenMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScreenOutConfig_ScreenMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScreenOutConfig_ScreenMode>(
    ScreenOutConfig_ScreenMode_descriptor(), name, value);
}
enum ScreenOut_Format : int {
  ScreenOut_Format_FORMAT_UNSPECIFIED = 0,
  ScreenOut_Format_HTML = 1,
  ScreenOut_Format_ScreenOut_Format_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ScreenOut_Format_ScreenOut_Format_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ScreenOut_Format_IsValid(int value);
constexpr ScreenOut_Format ScreenOut_Format_Format_MIN = ScreenOut_Format_FORMAT_UNSPECIFIED;
constexpr ScreenOut_Format ScreenOut_Format_Format_MAX = ScreenOut_Format_HTML;
constexpr int ScreenOut_Format_Format_ARRAYSIZE = ScreenOut_Format_Format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScreenOut_Format_descriptor();
template<typename T>
inline const std::string& ScreenOut_Format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScreenOut_Format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScreenOut_Format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScreenOut_Format_descriptor(), enum_t_value);
}
inline bool ScreenOut_Format_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScreenOut_Format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScreenOut_Format>(
    ScreenOut_Format_descriptor(), name, value);
}
enum DialogStateOut_MicrophoneMode : int {
  DialogStateOut_MicrophoneMode_MICROPHONE_MODE_UNSPECIFIED = 0,
  DialogStateOut_MicrophoneMode_CLOSE_MICROPHONE = 1,
  DialogStateOut_MicrophoneMode_DIALOG_FOLLOW_ON = 2,
  DialogStateOut_MicrophoneMode_DialogStateOut_MicrophoneMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DialogStateOut_MicrophoneMode_DialogStateOut_MicrophoneMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DialogStateOut_MicrophoneMode_IsValid(int value);
constexpr DialogStateOut_MicrophoneMode DialogStateOut_MicrophoneMode_MicrophoneMode_MIN = DialogStateOut_MicrophoneMode_MICROPHONE_MODE_UNSPECIFIED;
constexpr DialogStateOut_MicrophoneMode DialogStateOut_MicrophoneMode_MicrophoneMode_MAX = DialogStateOut_MicrophoneMode_DIALOG_FOLLOW_ON;
constexpr int DialogStateOut_MicrophoneMode_MicrophoneMode_ARRAYSIZE = DialogStateOut_MicrophoneMode_MicrophoneMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DialogStateOut_MicrophoneMode_descriptor();
template<typename T>
inline const std::string& DialogStateOut_MicrophoneMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DialogStateOut_MicrophoneMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DialogStateOut_MicrophoneMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DialogStateOut_MicrophoneMode_descriptor(), enum_t_value);
}
inline bool DialogStateOut_MicrophoneMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DialogStateOut_MicrophoneMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DialogStateOut_MicrophoneMode>(
    DialogStateOut_MicrophoneMode_descriptor(), name, value);
}
// ===================================================================

class AssistRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AssistRequest) */ {
 public:
  inline AssistRequest() : AssistRequest(nullptr) {}
  ~AssistRequest() override;
  explicit constexpr AssistRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssistRequest(const AssistRequest& from);
  AssistRequest(AssistRequest&& from) noexcept
    : AssistRequest() {
    *this = ::std::move(from);
  }

  inline AssistRequest& operator=(const AssistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssistRequest& operator=(AssistRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssistRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kConfig = 1,
    kAudioIn = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const AssistRequest* internal_default_instance() {
    return reinterpret_cast<const AssistRequest*>(
               &_AssistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AssistRequest& a, AssistRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssistRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssistRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssistRequest* New() const final {
    return new AssistRequest();
  }

  AssistRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssistRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssistRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssistRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssistRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.AssistRequest";
  }
  protected:
  explicit AssistRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kAudioInFieldNumber = 2,
  };
  // .google.assistant.embedded.v1alpha2.AssistConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::assistant::embedded::v1alpha2::AssistConfig& config() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::AssistConfig* release_config();
  ::google::assistant::embedded::v1alpha2::AssistConfig* mutable_config();
  void set_allocated_config(::google::assistant::embedded::v1alpha2::AssistConfig* config);
  private:
  const ::google::assistant::embedded::v1alpha2::AssistConfig& _internal_config() const;
  ::google::assistant::embedded::v1alpha2::AssistConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::assistant::embedded::v1alpha2::AssistConfig* config);
  ::google::assistant::embedded::v1alpha2::AssistConfig* unsafe_arena_release_config();

  // bytes audio_in = 2;
  bool has_audio_in() const;
  private:
  bool _internal_has_audio_in() const;
  public:
  void clear_audio_in();
  const std::string& audio_in() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_in(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_in();
  PROTOBUF_MUST_USE_RESULT std::string* release_audio_in();
  void set_allocated_audio_in(std::string* audio_in);
  private:
  const std::string& _internal_audio_in() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_in(const std::string& value);
  std::string* _internal_mutable_audio_in();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AssistRequest)
 private:
  class _Internal;
  void set_has_config();
  void set_has_audio_in();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::assistant::embedded::v1alpha2::AssistConfig* config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_in_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class AssistResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AssistResponse) */ {
 public:
  inline AssistResponse() : AssistResponse(nullptr) {}
  ~AssistResponse() override;
  explicit constexpr AssistResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssistResponse(const AssistResponse& from);
  AssistResponse(AssistResponse&& from) noexcept
    : AssistResponse() {
    *this = ::std::move(from);
  }

  inline AssistResponse& operator=(const AssistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssistResponse& operator=(AssistResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssistResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssistResponse* internal_default_instance() {
    return reinterpret_cast<const AssistResponse*>(
               &_AssistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AssistResponse& a, AssistResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssistResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssistResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssistResponse* New() const final {
    return new AssistResponse();
  }

  AssistResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssistResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssistResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssistResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssistResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.AssistResponse";
  }
  protected:
  explicit AssistResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AssistResponse_EventType EventType;
  static constexpr EventType EVENT_TYPE_UNSPECIFIED =
    AssistResponse_EventType_EVENT_TYPE_UNSPECIFIED;
  static constexpr EventType END_OF_UTTERANCE =
    AssistResponse_EventType_END_OF_UTTERANCE;
  static inline bool EventType_IsValid(int value) {
    return AssistResponse_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    AssistResponse_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    AssistResponse_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    AssistResponse_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return AssistResponse_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return AssistResponse_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return AssistResponse_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpeechResultsFieldNumber = 2,
    kAudioOutFieldNumber = 3,
    kScreenOutFieldNumber = 4,
    kDialogStateOutFieldNumber = 5,
    kDeviceActionFieldNumber = 6,
    kDebugInfoFieldNumber = 8,
    kEventTypeFieldNumber = 1,
  };
  // repeated .google.assistant.embedded.v1alpha2.SpeechRecognitionResult speech_results = 2;
  int speech_results_size() const;
  private:
  int _internal_speech_results_size() const;
  public:
  void clear_speech_results();
  ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* mutable_speech_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult >*
      mutable_speech_results();
  private:
  const ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult& _internal_speech_results(int index) const;
  ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* _internal_add_speech_results();
  public:
  const ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult& speech_results(int index) const;
  ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* add_speech_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult >&
      speech_results() const;

  // .google.assistant.embedded.v1alpha2.AudioOut audio_out = 3;
  bool has_audio_out() const;
  private:
  bool _internal_has_audio_out() const;
  public:
  void clear_audio_out();
  const ::google::assistant::embedded::v1alpha2::AudioOut& audio_out() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::AudioOut* release_audio_out();
  ::google::assistant::embedded::v1alpha2::AudioOut* mutable_audio_out();
  void set_allocated_audio_out(::google::assistant::embedded::v1alpha2::AudioOut* audio_out);
  private:
  const ::google::assistant::embedded::v1alpha2::AudioOut& _internal_audio_out() const;
  ::google::assistant::embedded::v1alpha2::AudioOut* _internal_mutable_audio_out();
  public:
  void unsafe_arena_set_allocated_audio_out(
      ::google::assistant::embedded::v1alpha2::AudioOut* audio_out);
  ::google::assistant::embedded::v1alpha2::AudioOut* unsafe_arena_release_audio_out();

  // .google.assistant.embedded.v1alpha2.ScreenOut screen_out = 4;
  bool has_screen_out() const;
  private:
  bool _internal_has_screen_out() const;
  public:
  void clear_screen_out();
  const ::google::assistant::embedded::v1alpha2::ScreenOut& screen_out() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::ScreenOut* release_screen_out();
  ::google::assistant::embedded::v1alpha2::ScreenOut* mutable_screen_out();
  void set_allocated_screen_out(::google::assistant::embedded::v1alpha2::ScreenOut* screen_out);
  private:
  const ::google::assistant::embedded::v1alpha2::ScreenOut& _internal_screen_out() const;
  ::google::assistant::embedded::v1alpha2::ScreenOut* _internal_mutable_screen_out();
  public:
  void unsafe_arena_set_allocated_screen_out(
      ::google::assistant::embedded::v1alpha2::ScreenOut* screen_out);
  ::google::assistant::embedded::v1alpha2::ScreenOut* unsafe_arena_release_screen_out();

  // .google.assistant.embedded.v1alpha2.DialogStateOut dialog_state_out = 5;
  bool has_dialog_state_out() const;
  private:
  bool _internal_has_dialog_state_out() const;
  public:
  void clear_dialog_state_out();
  const ::google::assistant::embedded::v1alpha2::DialogStateOut& dialog_state_out() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::DialogStateOut* release_dialog_state_out();
  ::google::assistant::embedded::v1alpha2::DialogStateOut* mutable_dialog_state_out();
  void set_allocated_dialog_state_out(::google::assistant::embedded::v1alpha2::DialogStateOut* dialog_state_out);
  private:
  const ::google::assistant::embedded::v1alpha2::DialogStateOut& _internal_dialog_state_out() const;
  ::google::assistant::embedded::v1alpha2::DialogStateOut* _internal_mutable_dialog_state_out();
  public:
  void unsafe_arena_set_allocated_dialog_state_out(
      ::google::assistant::embedded::v1alpha2::DialogStateOut* dialog_state_out);
  ::google::assistant::embedded::v1alpha2::DialogStateOut* unsafe_arena_release_dialog_state_out();

  // .google.assistant.embedded.v1alpha2.DeviceAction device_action = 6;
  bool has_device_action() const;
  private:
  bool _internal_has_device_action() const;
  public:
  void clear_device_action();
  const ::google::assistant::embedded::v1alpha2::DeviceAction& device_action() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::DeviceAction* release_device_action();
  ::google::assistant::embedded::v1alpha2::DeviceAction* mutable_device_action();
  void set_allocated_device_action(::google::assistant::embedded::v1alpha2::DeviceAction* device_action);
  private:
  const ::google::assistant::embedded::v1alpha2::DeviceAction& _internal_device_action() const;
  ::google::assistant::embedded::v1alpha2::DeviceAction* _internal_mutable_device_action();
  public:
  void unsafe_arena_set_allocated_device_action(
      ::google::assistant::embedded::v1alpha2::DeviceAction* device_action);
  ::google::assistant::embedded::v1alpha2::DeviceAction* unsafe_arena_release_device_action();

  // .google.assistant.embedded.v1alpha2.DebugInfo debug_info = 8;
  bool has_debug_info() const;
  private:
  bool _internal_has_debug_info() const;
  public:
  void clear_debug_info();
  const ::google::assistant::embedded::v1alpha2::DebugInfo& debug_info() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::DebugInfo* release_debug_info();
  ::google::assistant::embedded::v1alpha2::DebugInfo* mutable_debug_info();
  void set_allocated_debug_info(::google::assistant::embedded::v1alpha2::DebugInfo* debug_info);
  private:
  const ::google::assistant::embedded::v1alpha2::DebugInfo& _internal_debug_info() const;
  ::google::assistant::embedded::v1alpha2::DebugInfo* _internal_mutable_debug_info();
  public:
  void unsafe_arena_set_allocated_debug_info(
      ::google::assistant::embedded::v1alpha2::DebugInfo* debug_info);
  ::google::assistant::embedded::v1alpha2::DebugInfo* unsafe_arena_release_debug_info();

  // .google.assistant.embedded.v1alpha2.AssistResponse.EventType event_type = 1;
  void clear_event_type();
  ::google::assistant::embedded::v1alpha2::AssistResponse_EventType event_type() const;
  void set_event_type(::google::assistant::embedded::v1alpha2::AssistResponse_EventType value);
  private:
  ::google::assistant::embedded::v1alpha2::AssistResponse_EventType _internal_event_type() const;
  void _internal_set_event_type(::google::assistant::embedded::v1alpha2::AssistResponse_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AssistResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult > speech_results_;
  ::google::assistant::embedded::v1alpha2::AudioOut* audio_out_;
  ::google::assistant::embedded::v1alpha2::ScreenOut* screen_out_;
  ::google::assistant::embedded::v1alpha2::DialogStateOut* dialog_state_out_;
  ::google::assistant::embedded::v1alpha2::DeviceAction* device_action_;
  ::google::assistant::embedded::v1alpha2::DebugInfo* debug_info_;
  int event_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class DebugInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DebugInfo) */ {
 public:
  inline DebugInfo() : DebugInfo(nullptr) {}
  ~DebugInfo() override;
  explicit constexpr DebugInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugInfo(const DebugInfo& from);
  DebugInfo(DebugInfo&& from) noexcept
    : DebugInfo() {
    *this = ::std::move(from);
  }

  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugInfo& operator=(DebugInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugInfo* internal_default_instance() {
    return reinterpret_cast<const DebugInfo*>(
               &_DebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DebugInfo& a, DebugInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugInfo* New() const final {
    return new DebugInfo();
  }

  DebugInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DebugInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.DebugInfo";
  }
  protected:
  explicit DebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAogAgentToAssistantJsonFieldNumber = 1,
  };
  // string aog_agent_to_assistant_json = 1;
  void clear_aog_agent_to_assistant_json();
  const std::string& aog_agent_to_assistant_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aog_agent_to_assistant_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aog_agent_to_assistant_json();
  PROTOBUF_MUST_USE_RESULT std::string* release_aog_agent_to_assistant_json();
  void set_allocated_aog_agent_to_assistant_json(std::string* aog_agent_to_assistant_json);
  private:
  const std::string& _internal_aog_agent_to_assistant_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aog_agent_to_assistant_json(const std::string& value);
  std::string* _internal_mutable_aog_agent_to_assistant_json();
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DebugInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aog_agent_to_assistant_json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class AssistConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AssistConfig) */ {
 public:
  inline AssistConfig() : AssistConfig(nullptr) {}
  ~AssistConfig() override;
  explicit constexpr AssistConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssistConfig(const AssistConfig& from);
  AssistConfig(AssistConfig&& from) noexcept
    : AssistConfig() {
    *this = ::std::move(from);
  }

  inline AssistConfig& operator=(const AssistConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssistConfig& operator=(AssistConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssistConfig& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kAudioInConfig = 1,
    kTextQuery = 6,
    TYPE_NOT_SET = 0,
  };

  static inline const AssistConfig* internal_default_instance() {
    return reinterpret_cast<const AssistConfig*>(
               &_AssistConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AssistConfig& a, AssistConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AssistConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssistConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssistConfig* New() const final {
    return new AssistConfig();
  }

  AssistConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssistConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssistConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssistConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssistConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.AssistConfig";
  }
  protected:
  explicit AssistConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioOutConfigFieldNumber = 2,
    kDialogStateInFieldNumber = 3,
    kDeviceConfigFieldNumber = 4,
    kDebugConfigFieldNumber = 5,
    kScreenOutConfigFieldNumber = 8,
    kAudioInConfigFieldNumber = 1,
    kTextQueryFieldNumber = 6,
  };
  // .google.assistant.embedded.v1alpha2.AudioOutConfig audio_out_config = 2;
  bool has_audio_out_config() const;
  private:
  bool _internal_has_audio_out_config() const;
  public:
  void clear_audio_out_config();
  const ::google::assistant::embedded::v1alpha2::AudioOutConfig& audio_out_config() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::AudioOutConfig* release_audio_out_config();
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* mutable_audio_out_config();
  void set_allocated_audio_out_config(::google::assistant::embedded::v1alpha2::AudioOutConfig* audio_out_config);
  private:
  const ::google::assistant::embedded::v1alpha2::AudioOutConfig& _internal_audio_out_config() const;
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* _internal_mutable_audio_out_config();
  public:
  void unsafe_arena_set_allocated_audio_out_config(
      ::google::assistant::embedded::v1alpha2::AudioOutConfig* audio_out_config);
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* unsafe_arena_release_audio_out_config();

  // .google.assistant.embedded.v1alpha2.DialogStateIn dialog_state_in = 3;
  bool has_dialog_state_in() const;
  private:
  bool _internal_has_dialog_state_in() const;
  public:
  void clear_dialog_state_in();
  const ::google::assistant::embedded::v1alpha2::DialogStateIn& dialog_state_in() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::DialogStateIn* release_dialog_state_in();
  ::google::assistant::embedded::v1alpha2::DialogStateIn* mutable_dialog_state_in();
  void set_allocated_dialog_state_in(::google::assistant::embedded::v1alpha2::DialogStateIn* dialog_state_in);
  private:
  const ::google::assistant::embedded::v1alpha2::DialogStateIn& _internal_dialog_state_in() const;
  ::google::assistant::embedded::v1alpha2::DialogStateIn* _internal_mutable_dialog_state_in();
  public:
  void unsafe_arena_set_allocated_dialog_state_in(
      ::google::assistant::embedded::v1alpha2::DialogStateIn* dialog_state_in);
  ::google::assistant::embedded::v1alpha2::DialogStateIn* unsafe_arena_release_dialog_state_in();

  // .google.assistant.embedded.v1alpha2.DeviceConfig device_config = 4;
  bool has_device_config() const;
  private:
  bool _internal_has_device_config() const;
  public:
  void clear_device_config();
  const ::google::assistant::embedded::v1alpha2::DeviceConfig& device_config() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::DeviceConfig* release_device_config();
  ::google::assistant::embedded::v1alpha2::DeviceConfig* mutable_device_config();
  void set_allocated_device_config(::google::assistant::embedded::v1alpha2::DeviceConfig* device_config);
  private:
  const ::google::assistant::embedded::v1alpha2::DeviceConfig& _internal_device_config() const;
  ::google::assistant::embedded::v1alpha2::DeviceConfig* _internal_mutable_device_config();
  public:
  void unsafe_arena_set_allocated_device_config(
      ::google::assistant::embedded::v1alpha2::DeviceConfig* device_config);
  ::google::assistant::embedded::v1alpha2::DeviceConfig* unsafe_arena_release_device_config();

  // .google.assistant.embedded.v1alpha2.DebugConfig debug_config = 5;
  bool has_debug_config() const;
  private:
  bool _internal_has_debug_config() const;
  public:
  void clear_debug_config();
  const ::google::assistant::embedded::v1alpha2::DebugConfig& debug_config() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::DebugConfig* release_debug_config();
  ::google::assistant::embedded::v1alpha2::DebugConfig* mutable_debug_config();
  void set_allocated_debug_config(::google::assistant::embedded::v1alpha2::DebugConfig* debug_config);
  private:
  const ::google::assistant::embedded::v1alpha2::DebugConfig& _internal_debug_config() const;
  ::google::assistant::embedded::v1alpha2::DebugConfig* _internal_mutable_debug_config();
  public:
  void unsafe_arena_set_allocated_debug_config(
      ::google::assistant::embedded::v1alpha2::DebugConfig* debug_config);
  ::google::assistant::embedded::v1alpha2::DebugConfig* unsafe_arena_release_debug_config();

  // .google.assistant.embedded.v1alpha2.ScreenOutConfig screen_out_config = 8;
  bool has_screen_out_config() const;
  private:
  bool _internal_has_screen_out_config() const;
  public:
  void clear_screen_out_config();
  const ::google::assistant::embedded::v1alpha2::ScreenOutConfig& screen_out_config() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::ScreenOutConfig* release_screen_out_config();
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* mutable_screen_out_config();
  void set_allocated_screen_out_config(::google::assistant::embedded::v1alpha2::ScreenOutConfig* screen_out_config);
  private:
  const ::google::assistant::embedded::v1alpha2::ScreenOutConfig& _internal_screen_out_config() const;
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* _internal_mutable_screen_out_config();
  public:
  void unsafe_arena_set_allocated_screen_out_config(
      ::google::assistant::embedded::v1alpha2::ScreenOutConfig* screen_out_config);
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* unsafe_arena_release_screen_out_config();

  // .google.assistant.embedded.v1alpha2.AudioInConfig audio_in_config = 1;
  bool has_audio_in_config() const;
  private:
  bool _internal_has_audio_in_config() const;
  public:
  void clear_audio_in_config();
  const ::google::assistant::embedded::v1alpha2::AudioInConfig& audio_in_config() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::AudioInConfig* release_audio_in_config();
  ::google::assistant::embedded::v1alpha2::AudioInConfig* mutable_audio_in_config();
  void set_allocated_audio_in_config(::google::assistant::embedded::v1alpha2::AudioInConfig* audio_in_config);
  private:
  const ::google::assistant::embedded::v1alpha2::AudioInConfig& _internal_audio_in_config() const;
  ::google::assistant::embedded::v1alpha2::AudioInConfig* _internal_mutable_audio_in_config();
  public:
  void unsafe_arena_set_allocated_audio_in_config(
      ::google::assistant::embedded::v1alpha2::AudioInConfig* audio_in_config);
  ::google::assistant::embedded::v1alpha2::AudioInConfig* unsafe_arena_release_audio_in_config();

  // string text_query = 6;
  bool has_text_query() const;
  private:
  bool _internal_has_text_query() const;
  public:
  void clear_text_query();
  const std::string& text_query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_query();
  PROTOBUF_MUST_USE_RESULT std::string* release_text_query();
  void set_allocated_text_query(std::string* text_query);
  private:
  const std::string& _internal_text_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_query(const std::string& value);
  std::string* _internal_mutable_text_query();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AssistConfig)
 private:
  class _Internal;
  void set_has_audio_in_config();
  void set_has_text_query();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* audio_out_config_;
  ::google::assistant::embedded::v1alpha2::DialogStateIn* dialog_state_in_;
  ::google::assistant::embedded::v1alpha2::DeviceConfig* device_config_;
  ::google::assistant::embedded::v1alpha2::DebugConfig* debug_config_;
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* screen_out_config_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::assistant::embedded::v1alpha2::AudioInConfig* audio_in_config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_query_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class AudioInConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AudioInConfig) */ {
 public:
  inline AudioInConfig() : AudioInConfig(nullptr) {}
  ~AudioInConfig() override;
  explicit constexpr AudioInConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioInConfig(const AudioInConfig& from);
  AudioInConfig(AudioInConfig&& from) noexcept
    : AudioInConfig() {
    *this = ::std::move(from);
  }

  inline AudioInConfig& operator=(const AudioInConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioInConfig& operator=(AudioInConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioInConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioInConfig* internal_default_instance() {
    return reinterpret_cast<const AudioInConfig*>(
               &_AudioInConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AudioInConfig& a, AudioInConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioInConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioInConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioInConfig* New() const final {
    return new AudioInConfig();
  }

  AudioInConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioInConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioInConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioInConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioInConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.AudioInConfig";
  }
  protected:
  explicit AudioInConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AudioInConfig_Encoding Encoding;
  static constexpr Encoding ENCODING_UNSPECIFIED =
    AudioInConfig_Encoding_ENCODING_UNSPECIFIED;
  static constexpr Encoding LINEAR16 =
    AudioInConfig_Encoding_LINEAR16;
  static constexpr Encoding FLAC =
    AudioInConfig_Encoding_FLAC;
  static inline bool Encoding_IsValid(int value) {
    return AudioInConfig_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN =
    AudioInConfig_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX =
    AudioInConfig_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE =
    AudioInConfig_Encoding_Encoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Encoding_descriptor() {
    return AudioInConfig_Encoding_descriptor();
  }
  template<typename T>
  static inline const std::string& Encoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Encoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Encoding_Name.");
    return AudioInConfig_Encoding_Name(enum_t_value);
  }
  static inline bool Encoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Encoding* value) {
    return AudioInConfig_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEncodingFieldNumber = 1,
    kSampleRateHertzFieldNumber = 2,
  };
  // .google.assistant.embedded.v1alpha2.AudioInConfig.Encoding encoding = 1;
  void clear_encoding();
  ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding encoding() const;
  void set_encoding(::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding value);
  private:
  ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding _internal_encoding() const;
  void _internal_set_encoding(::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding value);
  public:

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AudioInConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int encoding_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class AudioOutConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AudioOutConfig) */ {
 public:
  inline AudioOutConfig() : AudioOutConfig(nullptr) {}
  ~AudioOutConfig() override;
  explicit constexpr AudioOutConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioOutConfig(const AudioOutConfig& from);
  AudioOutConfig(AudioOutConfig&& from) noexcept
    : AudioOutConfig() {
    *this = ::std::move(from);
  }

  inline AudioOutConfig& operator=(const AudioOutConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioOutConfig& operator=(AudioOutConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioOutConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioOutConfig* internal_default_instance() {
    return reinterpret_cast<const AudioOutConfig*>(
               &_AudioOutConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AudioOutConfig& a, AudioOutConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioOutConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioOutConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioOutConfig* New() const final {
    return new AudioOutConfig();
  }

  AudioOutConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioOutConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioOutConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioOutConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioOutConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.AudioOutConfig";
  }
  protected:
  explicit AudioOutConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AudioOutConfig_Encoding Encoding;
  static constexpr Encoding ENCODING_UNSPECIFIED =
    AudioOutConfig_Encoding_ENCODING_UNSPECIFIED;
  static constexpr Encoding LINEAR16 =
    AudioOutConfig_Encoding_LINEAR16;
  static constexpr Encoding MP3 =
    AudioOutConfig_Encoding_MP3;
  static constexpr Encoding OPUS_IN_OGG =
    AudioOutConfig_Encoding_OPUS_IN_OGG;
  static inline bool Encoding_IsValid(int value) {
    return AudioOutConfig_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN =
    AudioOutConfig_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX =
    AudioOutConfig_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE =
    AudioOutConfig_Encoding_Encoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Encoding_descriptor() {
    return AudioOutConfig_Encoding_descriptor();
  }
  template<typename T>
  static inline const std::string& Encoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Encoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Encoding_Name.");
    return AudioOutConfig_Encoding_Name(enum_t_value);
  }
  static inline bool Encoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Encoding* value) {
    return AudioOutConfig_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEncodingFieldNumber = 1,
    kSampleRateHertzFieldNumber = 2,
    kVolumePercentageFieldNumber = 3,
  };
  // .google.assistant.embedded.v1alpha2.AudioOutConfig.Encoding encoding = 1;
  void clear_encoding();
  ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding encoding() const;
  void set_encoding(::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding value);
  private:
  ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding _internal_encoding() const;
  void _internal_set_encoding(::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding value);
  public:

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume_percentage = 3;
  void clear_volume_percentage();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_percentage() const;
  void set_volume_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_percentage() const;
  void _internal_set_volume_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AudioOutConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int encoding_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class ScreenOutConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.ScreenOutConfig) */ {
 public:
  inline ScreenOutConfig() : ScreenOutConfig(nullptr) {}
  ~ScreenOutConfig() override;
  explicit constexpr ScreenOutConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScreenOutConfig(const ScreenOutConfig& from);
  ScreenOutConfig(ScreenOutConfig&& from) noexcept
    : ScreenOutConfig() {
    *this = ::std::move(from);
  }

  inline ScreenOutConfig& operator=(const ScreenOutConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScreenOutConfig& operator=(ScreenOutConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScreenOutConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScreenOutConfig* internal_default_instance() {
    return reinterpret_cast<const ScreenOutConfig*>(
               &_ScreenOutConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ScreenOutConfig& a, ScreenOutConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScreenOutConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScreenOutConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScreenOutConfig* New() const final {
    return new ScreenOutConfig();
  }

  ScreenOutConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScreenOutConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScreenOutConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScreenOutConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenOutConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.ScreenOutConfig";
  }
  protected:
  explicit ScreenOutConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScreenOutConfig_ScreenMode ScreenMode;
  static constexpr ScreenMode SCREEN_MODE_UNSPECIFIED =
    ScreenOutConfig_ScreenMode_SCREEN_MODE_UNSPECIFIED;
  static constexpr ScreenMode OFF =
    ScreenOutConfig_ScreenMode_OFF;
  static constexpr ScreenMode PLAYING =
    ScreenOutConfig_ScreenMode_PLAYING;
  static inline bool ScreenMode_IsValid(int value) {
    return ScreenOutConfig_ScreenMode_IsValid(value);
  }
  static constexpr ScreenMode ScreenMode_MIN =
    ScreenOutConfig_ScreenMode_ScreenMode_MIN;
  static constexpr ScreenMode ScreenMode_MAX =
    ScreenOutConfig_ScreenMode_ScreenMode_MAX;
  static constexpr int ScreenMode_ARRAYSIZE =
    ScreenOutConfig_ScreenMode_ScreenMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScreenMode_descriptor() {
    return ScreenOutConfig_ScreenMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ScreenMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScreenMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScreenMode_Name.");
    return ScreenOutConfig_ScreenMode_Name(enum_t_value);
  }
  static inline bool ScreenMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ScreenMode* value) {
    return ScreenOutConfig_ScreenMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScreenModeFieldNumber = 1,
  };
  // .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;
  void clear_screen_mode();
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode screen_mode() const;
  void set_screen_mode(::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode value);
  private:
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode _internal_screen_mode() const;
  void _internal_set_screen_mode(::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode value);
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.ScreenOutConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int screen_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class DialogStateIn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DialogStateIn) */ {
 public:
  inline DialogStateIn() : DialogStateIn(nullptr) {}
  ~DialogStateIn() override;
  explicit constexpr DialogStateIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DialogStateIn(const DialogStateIn& from);
  DialogStateIn(DialogStateIn&& from) noexcept
    : DialogStateIn() {
    *this = ::std::move(from);
  }

  inline DialogStateIn& operator=(const DialogStateIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline DialogStateIn& operator=(DialogStateIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DialogStateIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const DialogStateIn* internal_default_instance() {
    return reinterpret_cast<const DialogStateIn*>(
               &_DialogStateIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DialogStateIn& a, DialogStateIn& b) {
    a.Swap(&b);
  }
  inline void Swap(DialogStateIn* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DialogStateIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DialogStateIn* New() const final {
    return new DialogStateIn();
  }

  DialogStateIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DialogStateIn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DialogStateIn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DialogStateIn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DialogStateIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.DialogStateIn";
  }
  protected:
  explicit DialogStateIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationStateFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kDeviceLocationFieldNumber = 5,
    kIsNewConversationFieldNumber = 7,
  };
  // bytes conversation_state = 1;
  void clear_conversation_state();
  const std::string& conversation_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_conversation_state();
  void set_allocated_conversation_state(std::string* conversation_state);
  private:
  const std::string& _internal_conversation_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_state(const std::string& value);
  std::string* _internal_mutable_conversation_state();
  public:

  // string language_code = 2;
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .google.assistant.embedded.v1alpha2.DeviceLocation device_location = 5;
  bool has_device_location() const;
  private:
  bool _internal_has_device_location() const;
  public:
  void clear_device_location();
  const ::google::assistant::embedded::v1alpha2::DeviceLocation& device_location() const;
  PROTOBUF_MUST_USE_RESULT ::google::assistant::embedded::v1alpha2::DeviceLocation* release_device_location();
  ::google::assistant::embedded::v1alpha2::DeviceLocation* mutable_device_location();
  void set_allocated_device_location(::google::assistant::embedded::v1alpha2::DeviceLocation* device_location);
  private:
  const ::google::assistant::embedded::v1alpha2::DeviceLocation& _internal_device_location() const;
  ::google::assistant::embedded::v1alpha2::DeviceLocation* _internal_mutable_device_location();
  public:
  void unsafe_arena_set_allocated_device_location(
      ::google::assistant::embedded::v1alpha2::DeviceLocation* device_location);
  ::google::assistant::embedded::v1alpha2::DeviceLocation* unsafe_arena_release_device_location();

  // bool is_new_conversation = 7;
  void clear_is_new_conversation();
  bool is_new_conversation() const;
  void set_is_new_conversation(bool value);
  private:
  bool _internal_is_new_conversation() const;
  void _internal_set_is_new_conversation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DialogStateIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::google::assistant::embedded::v1alpha2::DeviceLocation* device_location_;
  bool is_new_conversation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class DeviceConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DeviceConfig) */ {
 public:
  inline DeviceConfig() : DeviceConfig(nullptr) {}
  ~DeviceConfig() override;
  explicit constexpr DeviceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceConfig(const DeviceConfig& from);
  DeviceConfig(DeviceConfig&& from) noexcept
    : DeviceConfig() {
    *this = ::std::move(from);
  }

  inline DeviceConfig& operator=(const DeviceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConfig& operator=(DeviceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceConfig* internal_default_instance() {
    return reinterpret_cast<const DeviceConfig*>(
               &_DeviceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeviceConfig& a, DeviceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceConfig* New() const final {
    return new DeviceConfig();
  }

  DeviceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.DeviceConfig";
  }
  protected:
  explicit DeviceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kDeviceModelIdFieldNumber = 3,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string device_model_id = 3;
  void clear_device_model_id();
  const std::string& device_model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_model_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_model_id();
  void set_allocated_device_model_id(std::string* device_model_id);
  private:
  const std::string& _internal_device_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_model_id(const std::string& value);
  std::string* _internal_mutable_device_model_id();
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DeviceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_model_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class AudioOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AudioOut) */ {
 public:
  inline AudioOut() : AudioOut(nullptr) {}
  ~AudioOut() override;
  explicit constexpr AudioOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioOut(const AudioOut& from);
  AudioOut(AudioOut&& from) noexcept
    : AudioOut() {
    *this = ::std::move(from);
  }

  inline AudioOut& operator=(const AudioOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioOut& operator=(AudioOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioOut* internal_default_instance() {
    return reinterpret_cast<const AudioOut*>(
               &_AudioOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AudioOut& a, AudioOut& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioOut* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioOut* New() const final {
    return new AudioOut();
  }

  AudioOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioOut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.AudioOut";
  }
  protected:
  explicit AudioOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioDataFieldNumber = 1,
  };
  // bytes audio_data = 1;
  void clear_audio_data();
  const std::string& audio_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_audio_data();
  void set_allocated_audio_data(std::string* audio_data);
  private:
  const std::string& _internal_audio_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_data(const std::string& value);
  std::string* _internal_mutable_audio_data();
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AudioOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class ScreenOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.ScreenOut) */ {
 public:
  inline ScreenOut() : ScreenOut(nullptr) {}
  ~ScreenOut() override;
  explicit constexpr ScreenOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScreenOut(const ScreenOut& from);
  ScreenOut(ScreenOut&& from) noexcept
    : ScreenOut() {
    *this = ::std::move(from);
  }

  inline ScreenOut& operator=(const ScreenOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScreenOut& operator=(ScreenOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScreenOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScreenOut* internal_default_instance() {
    return reinterpret_cast<const ScreenOut*>(
               &_ScreenOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ScreenOut& a, ScreenOut& b) {
    a.Swap(&b);
  }
  inline void Swap(ScreenOut* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScreenOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScreenOut* New() const final {
    return new ScreenOut();
  }

  ScreenOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScreenOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScreenOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScreenOut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.ScreenOut";
  }
  protected:
  explicit ScreenOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScreenOut_Format Format;
  static constexpr Format FORMAT_UNSPECIFIED =
    ScreenOut_Format_FORMAT_UNSPECIFIED;
  static constexpr Format HTML =
    ScreenOut_Format_HTML;
  static inline bool Format_IsValid(int value) {
    return ScreenOut_Format_IsValid(value);
  }
  static constexpr Format Format_MIN =
    ScreenOut_Format_Format_MIN;
  static constexpr Format Format_MAX =
    ScreenOut_Format_Format_MAX;
  static constexpr int Format_ARRAYSIZE =
    ScreenOut_Format_Format_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Format_descriptor() {
    return ScreenOut_Format_descriptor();
  }
  template<typename T>
  static inline const std::string& Format_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Format>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Format_Name.");
    return ScreenOut_Format_Name(enum_t_value);
  }
  static inline bool Format_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Format* value) {
    return ScreenOut_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kFormatFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .google.assistant.embedded.v1alpha2.ScreenOut.Format format = 1;
  void clear_format();
  ::google::assistant::embedded::v1alpha2::ScreenOut_Format format() const;
  void set_format(::google::assistant::embedded::v1alpha2::ScreenOut_Format value);
  private:
  ::google::assistant::embedded::v1alpha2::ScreenOut_Format _internal_format() const;
  void _internal_set_format(::google::assistant::embedded::v1alpha2::ScreenOut_Format value);
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.ScreenOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class DeviceAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DeviceAction) */ {
 public:
  inline DeviceAction() : DeviceAction(nullptr) {}
  ~DeviceAction() override;
  explicit constexpr DeviceAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceAction(const DeviceAction& from);
  DeviceAction(DeviceAction&& from) noexcept
    : DeviceAction() {
    *this = ::std::move(from);
  }

  inline DeviceAction& operator=(const DeviceAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAction& operator=(DeviceAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceAction* internal_default_instance() {
    return reinterpret_cast<const DeviceAction*>(
               &_DeviceAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeviceAction& a, DeviceAction& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceAction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceAction* New() const final {
    return new DeviceAction();
  }

  DeviceAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceAction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.DeviceAction";
  }
  protected:
  explicit DeviceAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceRequestJsonFieldNumber = 1,
  };
  // string device_request_json = 1;
  void clear_device_request_json();
  const std::string& device_request_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_request_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_request_json();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_request_json();
  void set_allocated_device_request_json(std::string* device_request_json);
  private:
  const std::string& _internal_device_request_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_request_json(const std::string& value);
  std::string* _internal_mutable_device_request_json();
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DeviceAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_request_json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class SpeechRecognitionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.SpeechRecognitionResult) */ {
 public:
  inline SpeechRecognitionResult() : SpeechRecognitionResult(nullptr) {}
  ~SpeechRecognitionResult() override;
  explicit constexpr SpeechRecognitionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechRecognitionResult(const SpeechRecognitionResult& from);
  SpeechRecognitionResult(SpeechRecognitionResult&& from) noexcept
    : SpeechRecognitionResult() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionResult& operator=(const SpeechRecognitionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionResult& operator=(SpeechRecognitionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechRecognitionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechRecognitionResult* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionResult*>(
               &_SpeechRecognitionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SpeechRecognitionResult& a, SpeechRecognitionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechRecognitionResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechRecognitionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeechRecognitionResult* New() const final {
    return new SpeechRecognitionResult();
  }

  SpeechRecognitionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeechRecognitionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechRecognitionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpeechRecognitionResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechRecognitionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.SpeechRecognitionResult";
  }
  protected:
  explicit SpeechRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptFieldNumber = 1,
    kStabilityFieldNumber = 2,
  };
  // string transcript = 1;
  void clear_transcript();
  const std::string& transcript() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transcript(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transcript();
  PROTOBUF_MUST_USE_RESULT std::string* release_transcript();
  void set_allocated_transcript(std::string* transcript);
  private:
  const std::string& _internal_transcript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transcript(const std::string& value);
  std::string* _internal_mutable_transcript();
  public:

  // float stability = 2;
  void clear_stability();
  float stability() const;
  void set_stability(float value);
  private:
  float _internal_stability() const;
  void _internal_set_stability(float value);
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.SpeechRecognitionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_;
  float stability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class DialogStateOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DialogStateOut) */ {
 public:
  inline DialogStateOut() : DialogStateOut(nullptr) {}
  ~DialogStateOut() override;
  explicit constexpr DialogStateOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DialogStateOut(const DialogStateOut& from);
  DialogStateOut(DialogStateOut&& from) noexcept
    : DialogStateOut() {
    *this = ::std::move(from);
  }

  inline DialogStateOut& operator=(const DialogStateOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline DialogStateOut& operator=(DialogStateOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DialogStateOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const DialogStateOut* internal_default_instance() {
    return reinterpret_cast<const DialogStateOut*>(
               &_DialogStateOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DialogStateOut& a, DialogStateOut& b) {
    a.Swap(&b);
  }
  inline void Swap(DialogStateOut* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DialogStateOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DialogStateOut* New() const final {
    return new DialogStateOut();
  }

  DialogStateOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DialogStateOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DialogStateOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DialogStateOut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DialogStateOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.DialogStateOut";
  }
  protected:
  explicit DialogStateOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DialogStateOut_MicrophoneMode MicrophoneMode;
  static constexpr MicrophoneMode MICROPHONE_MODE_UNSPECIFIED =
    DialogStateOut_MicrophoneMode_MICROPHONE_MODE_UNSPECIFIED;
  static constexpr MicrophoneMode CLOSE_MICROPHONE =
    DialogStateOut_MicrophoneMode_CLOSE_MICROPHONE;
  static constexpr MicrophoneMode DIALOG_FOLLOW_ON =
    DialogStateOut_MicrophoneMode_DIALOG_FOLLOW_ON;
  static inline bool MicrophoneMode_IsValid(int value) {
    return DialogStateOut_MicrophoneMode_IsValid(value);
  }
  static constexpr MicrophoneMode MicrophoneMode_MIN =
    DialogStateOut_MicrophoneMode_MicrophoneMode_MIN;
  static constexpr MicrophoneMode MicrophoneMode_MAX =
    DialogStateOut_MicrophoneMode_MicrophoneMode_MAX;
  static constexpr int MicrophoneMode_ARRAYSIZE =
    DialogStateOut_MicrophoneMode_MicrophoneMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MicrophoneMode_descriptor() {
    return DialogStateOut_MicrophoneMode_descriptor();
  }
  template<typename T>
  static inline const std::string& MicrophoneMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MicrophoneMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MicrophoneMode_Name.");
    return DialogStateOut_MicrophoneMode_Name(enum_t_value);
  }
  static inline bool MicrophoneMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MicrophoneMode* value) {
    return DialogStateOut_MicrophoneMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSupplementalDisplayTextFieldNumber = 1,
    kConversationStateFieldNumber = 2,
    kMicrophoneModeFieldNumber = 3,
    kVolumePercentageFieldNumber = 4,
  };
  // string supplemental_display_text = 1;
  void clear_supplemental_display_text();
  const std::string& supplemental_display_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_supplemental_display_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_supplemental_display_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_supplemental_display_text();
  void set_allocated_supplemental_display_text(std::string* supplemental_display_text);
  private:
  const std::string& _internal_supplemental_display_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_supplemental_display_text(const std::string& value);
  std::string* _internal_mutable_supplemental_display_text();
  public:

  // bytes conversation_state = 2;
  void clear_conversation_state();
  const std::string& conversation_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_conversation_state();
  void set_allocated_conversation_state(std::string* conversation_state);
  private:
  const std::string& _internal_conversation_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_state(const std::string& value);
  std::string* _internal_mutable_conversation_state();
  public:

  // .google.assistant.embedded.v1alpha2.DialogStateOut.MicrophoneMode microphone_mode = 3;
  void clear_microphone_mode();
  ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode microphone_mode() const;
  void set_microphone_mode(::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode value);
  private:
  ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode _internal_microphone_mode() const;
  void _internal_set_microphone_mode(::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode value);
  public:

  // int32 volume_percentage = 4;
  void clear_volume_percentage();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_percentage() const;
  void set_volume_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_percentage() const;
  void _internal_set_volume_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DialogStateOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supplemental_display_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_state_;
  int microphone_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class DebugConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DebugConfig) */ {
 public:
  inline DebugConfig() : DebugConfig(nullptr) {}
  ~DebugConfig() override;
  explicit constexpr DebugConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugConfig(const DebugConfig& from);
  DebugConfig(DebugConfig&& from) noexcept
    : DebugConfig() {
    *this = ::std::move(from);
  }

  inline DebugConfig& operator=(const DebugConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugConfig& operator=(DebugConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugConfig* internal_default_instance() {
    return reinterpret_cast<const DebugConfig*>(
               &_DebugConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DebugConfig& a, DebugConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugConfig* New() const final {
    return new DebugConfig();
  }

  DebugConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DebugConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.DebugConfig";
  }
  protected:
  explicit DebugConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnDebugInfoFieldNumber = 6,
  };
  // bool return_debug_info = 6;
  void clear_return_debug_info();
  bool return_debug_info() const;
  void set_return_debug_info(bool value);
  private:
  bool _internal_return_debug_info() const;
  void _internal_set_return_debug_info(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DebugConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool return_debug_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// -------------------------------------------------------------------

class DeviceLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DeviceLocation) */ {
 public:
  inline DeviceLocation() : DeviceLocation(nullptr) {}
  ~DeviceLocation() override;
  explicit constexpr DeviceLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceLocation(const DeviceLocation& from);
  DeviceLocation(DeviceLocation&& from) noexcept
    : DeviceLocation() {
    *this = ::std::move(from);
  }

  inline DeviceLocation& operator=(const DeviceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLocation& operator=(DeviceLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceLocation& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kCoordinates = 1,
    TYPE_NOT_SET = 0,
  };

  static inline const DeviceLocation* internal_default_instance() {
    return reinterpret_cast<const DeviceLocation*>(
               &_DeviceLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeviceLocation& a, DeviceLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLocation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLocation* New() const final {
    return new DeviceLocation();
  }

  DeviceLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceLocation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.assistant.embedded.v1alpha2.DeviceLocation";
  }
  protected:
  explicit DeviceLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 1,
  };
  // .google.type.LatLng coordinates = 1;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::google::type::LatLng& coordinates() const;
  PROTOBUF_MUST_USE_RESULT ::google::type::LatLng* release_coordinates();
  ::google::type::LatLng* mutable_coordinates();
  void set_allocated_coordinates(::google::type::LatLng* coordinates);
  private:
  const ::google::type::LatLng& _internal_coordinates() const;
  ::google::type::LatLng* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::google::type::LatLng* coordinates);
  ::google::type::LatLng* unsafe_arena_release_coordinates();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DeviceLocation)
 private:
  class _Internal;
  void set_has_coordinates();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::type::LatLng* coordinates_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AssistRequest

// .google.assistant.embedded.v1alpha2.AssistConfig config = 1;
inline bool AssistRequest::_internal_has_config() const {
  return type_case() == kConfig;
}
inline bool AssistRequest::has_config() const {
  return _internal_has_config();
}
inline void AssistRequest::set_has_config() {
  _oneof_case_[0] = kConfig;
}
inline void AssistRequest::clear_config() {
  if (_internal_has_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.config_;
    }
    clear_has_type();
  }
}
inline ::google::assistant::embedded::v1alpha2::AssistConfig* AssistRequest::release_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistRequest.config)
  if (_internal_has_config()) {
    clear_has_type();
      ::google::assistant::embedded::v1alpha2::AssistConfig* temp = type_.config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::assistant::embedded::v1alpha2::AssistConfig& AssistRequest::_internal_config() const {
  return _internal_has_config()
      ? *type_.config_
      : reinterpret_cast< ::google::assistant::embedded::v1alpha2::AssistConfig&>(::google::assistant::embedded::v1alpha2::_AssistConfig_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::AssistConfig& AssistRequest::config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistRequest.config)
  return _internal_config();
}
inline ::google::assistant::embedded::v1alpha2::AssistConfig* AssistRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.assistant.embedded.v1alpha2.AssistRequest.config)
  if (_internal_has_config()) {
    clear_has_type();
    ::google::assistant::embedded::v1alpha2::AssistConfig* temp = type_.config_;
    type_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssistRequest::unsafe_arena_set_allocated_config(::google::assistant::embedded::v1alpha2::AssistConfig* config) {
  clear_type();
  if (config) {
    set_has_config();
    type_.config_ = config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistRequest.config)
}
inline ::google::assistant::embedded::v1alpha2::AssistConfig* AssistRequest::_internal_mutable_config() {
  if (!_internal_has_config()) {
    clear_type();
    set_has_config();
    type_.config_ = CreateMaybeMessage< ::google::assistant::embedded::v1alpha2::AssistConfig >(GetArenaForAllocation());
  }
  return type_.config_;
}
inline ::google::assistant::embedded::v1alpha2::AssistConfig* AssistRequest::mutable_config() {
  ::google::assistant::embedded::v1alpha2::AssistConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistRequest.config)
  return _msg;
}

// bytes audio_in = 2;
inline bool AssistRequest::_internal_has_audio_in() const {
  return type_case() == kAudioIn;
}
inline bool AssistRequest::has_audio_in() const {
  return _internal_has_audio_in();
}
inline void AssistRequest::set_has_audio_in() {
  _oneof_case_[0] = kAudioIn;
}
inline void AssistRequest::clear_audio_in() {
  if (_internal_has_audio_in()) {
    type_.audio_in_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_type();
  }
}
inline const std::string& AssistRequest::audio_in() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
  return _internal_audio_in();
}
template <typename ArgT0, typename... ArgT>
inline void AssistRequest::set_audio_in(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_audio_in()) {
    clear_type();
    set_has_audio_in();
    type_.audio_in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.audio_in_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
}
inline std::string* AssistRequest::mutable_audio_in() {
  std::string* _s = _internal_mutable_audio_in();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
  return _s;
}
inline const std::string& AssistRequest::_internal_audio_in() const {
  if (_internal_has_audio_in()) {
    return type_.audio_in_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AssistRequest::_internal_set_audio_in(const std::string& value) {
  if (!_internal_has_audio_in()) {
    clear_type();
    set_has_audio_in();
    type_.audio_in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.audio_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssistRequest::_internal_mutable_audio_in() {
  if (!_internal_has_audio_in()) {
    clear_type();
    set_has_audio_in();
    type_.audio_in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return type_.audio_in_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssistRequest::release_audio_in() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
  if (_internal_has_audio_in()) {
    clear_has_type();
    return type_.audio_in_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void AssistRequest::set_allocated_audio_in(std::string* audio_in) {
  if (has_type()) {
    clear_type();
  }
  if (audio_in != nullptr) {
    set_has_audio_in();
    type_.audio_in_.UnsafeSetDefault(audio_in);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(audio_in);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
}

inline bool AssistRequest::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void AssistRequest::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline AssistRequest::TypeCase AssistRequest::type_case() const {
  return AssistRequest::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AssistResponse

// .google.assistant.embedded.v1alpha2.AssistResponse.EventType event_type = 1;
inline void AssistResponse::clear_event_type() {
  event_type_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::AssistResponse_EventType AssistResponse::_internal_event_type() const {
  return static_cast< ::google::assistant::embedded::v1alpha2::AssistResponse_EventType >(event_type_);
}
inline ::google::assistant::embedded::v1alpha2::AssistResponse_EventType AssistResponse::event_type() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.event_type)
  return _internal_event_type();
}
inline void AssistResponse::_internal_set_event_type(::google::assistant::embedded::v1alpha2::AssistResponse_EventType value) {
  
  event_type_ = value;
}
inline void AssistResponse::set_event_type(::google::assistant::embedded::v1alpha2::AssistResponse_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AssistResponse.event_type)
}

// .google.assistant.embedded.v1alpha2.AudioOut audio_out = 3;
inline bool AssistResponse::_internal_has_audio_out() const {
  return this != internal_default_instance() && audio_out_ != nullptr;
}
inline bool AssistResponse::has_audio_out() const {
  return _internal_has_audio_out();
}
inline void AssistResponse::clear_audio_out() {
  if (GetArenaForAllocation() == nullptr && audio_out_ != nullptr) {
    delete audio_out_;
  }
  audio_out_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::AudioOut& AssistResponse::_internal_audio_out() const {
  const ::google::assistant::embedded::v1alpha2::AudioOut* p = audio_out_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::AudioOut&>(
      ::google::assistant::embedded::v1alpha2::_AudioOut_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::AudioOut& AssistResponse::audio_out() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.audio_out)
  return _internal_audio_out();
}
inline void AssistResponse::unsafe_arena_set_allocated_audio_out(
    ::google::assistant::embedded::v1alpha2::AudioOut* audio_out) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_out_);
  }
  audio_out_ = audio_out;
  if (audio_out) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.audio_out)
}
inline ::google::assistant::embedded::v1alpha2::AudioOut* AssistResponse::release_audio_out() {
  
  ::google::assistant::embedded::v1alpha2::AudioOut* temp = audio_out_;
  audio_out_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::AudioOut* AssistResponse::unsafe_arena_release_audio_out() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistResponse.audio_out)
  
  ::google::assistant::embedded::v1alpha2::AudioOut* temp = audio_out_;
  audio_out_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::AudioOut* AssistResponse::_internal_mutable_audio_out() {
  
  if (audio_out_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AudioOut>(GetArenaForAllocation());
    audio_out_ = p;
  }
  return audio_out_;
}
inline ::google::assistant::embedded::v1alpha2::AudioOut* AssistResponse::mutable_audio_out() {
  ::google::assistant::embedded::v1alpha2::AudioOut* _msg = _internal_mutable_audio_out();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.audio_out)
  return _msg;
}
inline void AssistResponse::set_allocated_audio_out(::google::assistant::embedded::v1alpha2::AudioOut* audio_out) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete audio_out_;
  }
  if (audio_out) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::AudioOut>::GetOwningArena(audio_out);
    if (message_arena != submessage_arena) {
      audio_out = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_out, submessage_arena);
    }
    
  } else {
    
  }
  audio_out_ = audio_out;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.audio_out)
}

// .google.assistant.embedded.v1alpha2.ScreenOut screen_out = 4;
inline bool AssistResponse::_internal_has_screen_out() const {
  return this != internal_default_instance() && screen_out_ != nullptr;
}
inline bool AssistResponse::has_screen_out() const {
  return _internal_has_screen_out();
}
inline void AssistResponse::clear_screen_out() {
  if (GetArenaForAllocation() == nullptr && screen_out_ != nullptr) {
    delete screen_out_;
  }
  screen_out_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::ScreenOut& AssistResponse::_internal_screen_out() const {
  const ::google::assistant::embedded::v1alpha2::ScreenOut* p = screen_out_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::ScreenOut&>(
      ::google::assistant::embedded::v1alpha2::_ScreenOut_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::ScreenOut& AssistResponse::screen_out() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.screen_out)
  return _internal_screen_out();
}
inline void AssistResponse::unsafe_arena_set_allocated_screen_out(
    ::google::assistant::embedded::v1alpha2::ScreenOut* screen_out) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screen_out_);
  }
  screen_out_ = screen_out;
  if (screen_out) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.screen_out)
}
inline ::google::assistant::embedded::v1alpha2::ScreenOut* AssistResponse::release_screen_out() {
  
  ::google::assistant::embedded::v1alpha2::ScreenOut* temp = screen_out_;
  screen_out_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOut* AssistResponse::unsafe_arena_release_screen_out() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistResponse.screen_out)
  
  ::google::assistant::embedded::v1alpha2::ScreenOut* temp = screen_out_;
  screen_out_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOut* AssistResponse::_internal_mutable_screen_out() {
  
  if (screen_out_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::ScreenOut>(GetArenaForAllocation());
    screen_out_ = p;
  }
  return screen_out_;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOut* AssistResponse::mutable_screen_out() {
  ::google::assistant::embedded::v1alpha2::ScreenOut* _msg = _internal_mutable_screen_out();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.screen_out)
  return _msg;
}
inline void AssistResponse::set_allocated_screen_out(::google::assistant::embedded::v1alpha2::ScreenOut* screen_out) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete screen_out_;
  }
  if (screen_out) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::ScreenOut>::GetOwningArena(screen_out);
    if (message_arena != submessage_arena) {
      screen_out = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_out, submessage_arena);
    }
    
  } else {
    
  }
  screen_out_ = screen_out;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.screen_out)
}

// .google.assistant.embedded.v1alpha2.DeviceAction device_action = 6;
inline bool AssistResponse::_internal_has_device_action() const {
  return this != internal_default_instance() && device_action_ != nullptr;
}
inline bool AssistResponse::has_device_action() const {
  return _internal_has_device_action();
}
inline void AssistResponse::clear_device_action() {
  if (GetArenaForAllocation() == nullptr && device_action_ != nullptr) {
    delete device_action_;
  }
  device_action_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::DeviceAction& AssistResponse::_internal_device_action() const {
  const ::google::assistant::embedded::v1alpha2::DeviceAction* p = device_action_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DeviceAction&>(
      ::google::assistant::embedded::v1alpha2::_DeviceAction_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::DeviceAction& AssistResponse::device_action() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.device_action)
  return _internal_device_action();
}
inline void AssistResponse::unsafe_arena_set_allocated_device_action(
    ::google::assistant::embedded::v1alpha2::DeviceAction* device_action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_action_);
  }
  device_action_ = device_action;
  if (device_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.device_action)
}
inline ::google::assistant::embedded::v1alpha2::DeviceAction* AssistResponse::release_device_action() {
  
  ::google::assistant::embedded::v1alpha2::DeviceAction* temp = device_action_;
  device_action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DeviceAction* AssistResponse::unsafe_arena_release_device_action() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistResponse.device_action)
  
  ::google::assistant::embedded::v1alpha2::DeviceAction* temp = device_action_;
  device_action_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DeviceAction* AssistResponse::_internal_mutable_device_action() {
  
  if (device_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceAction>(GetArenaForAllocation());
    device_action_ = p;
  }
  return device_action_;
}
inline ::google::assistant::embedded::v1alpha2::DeviceAction* AssistResponse::mutable_device_action() {
  ::google::assistant::embedded::v1alpha2::DeviceAction* _msg = _internal_mutable_device_action();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.device_action)
  return _msg;
}
inline void AssistResponse::set_allocated_device_action(::google::assistant::embedded::v1alpha2::DeviceAction* device_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_action_;
  }
  if (device_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::DeviceAction>::GetOwningArena(device_action);
    if (message_arena != submessage_arena) {
      device_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_action, submessage_arena);
    }
    
  } else {
    
  }
  device_action_ = device_action;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.device_action)
}

// repeated .google.assistant.embedded.v1alpha2.SpeechRecognitionResult speech_results = 2;
inline int AssistResponse::_internal_speech_results_size() const {
  return speech_results_.size();
}
inline int AssistResponse::speech_results_size() const {
  return _internal_speech_results_size();
}
inline void AssistResponse::clear_speech_results() {
  speech_results_.Clear();
}
inline ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* AssistResponse::mutable_speech_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.speech_results)
  return speech_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult >*
AssistResponse::mutable_speech_results() {
  // @@protoc_insertion_point(field_mutable_list:google.assistant.embedded.v1alpha2.AssistResponse.speech_results)
  return &speech_results_;
}
inline const ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult& AssistResponse::_internal_speech_results(int index) const {
  return speech_results_.Get(index);
}
inline const ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult& AssistResponse::speech_results(int index) const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.speech_results)
  return _internal_speech_results(index);
}
inline ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* AssistResponse::_internal_add_speech_results() {
  return speech_results_.Add();
}
inline ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* AssistResponse::add_speech_results() {
  ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* _add = _internal_add_speech_results();
  // @@protoc_insertion_point(field_add:google.assistant.embedded.v1alpha2.AssistResponse.speech_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult >&
AssistResponse::speech_results() const {
  // @@protoc_insertion_point(field_list:google.assistant.embedded.v1alpha2.AssistResponse.speech_results)
  return speech_results_;
}

// .google.assistant.embedded.v1alpha2.DialogStateOut dialog_state_out = 5;
inline bool AssistResponse::_internal_has_dialog_state_out() const {
  return this != internal_default_instance() && dialog_state_out_ != nullptr;
}
inline bool AssistResponse::has_dialog_state_out() const {
  return _internal_has_dialog_state_out();
}
inline void AssistResponse::clear_dialog_state_out() {
  if (GetArenaForAllocation() == nullptr && dialog_state_out_ != nullptr) {
    delete dialog_state_out_;
  }
  dialog_state_out_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::DialogStateOut& AssistResponse::_internal_dialog_state_out() const {
  const ::google::assistant::embedded::v1alpha2::DialogStateOut* p = dialog_state_out_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DialogStateOut&>(
      ::google::assistant::embedded::v1alpha2::_DialogStateOut_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::DialogStateOut& AssistResponse::dialog_state_out() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.dialog_state_out)
  return _internal_dialog_state_out();
}
inline void AssistResponse::unsafe_arena_set_allocated_dialog_state_out(
    ::google::assistant::embedded::v1alpha2::DialogStateOut* dialog_state_out) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dialog_state_out_);
  }
  dialog_state_out_ = dialog_state_out;
  if (dialog_state_out) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.dialog_state_out)
}
inline ::google::assistant::embedded::v1alpha2::DialogStateOut* AssistResponse::release_dialog_state_out() {
  
  ::google::assistant::embedded::v1alpha2::DialogStateOut* temp = dialog_state_out_;
  dialog_state_out_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DialogStateOut* AssistResponse::unsafe_arena_release_dialog_state_out() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistResponse.dialog_state_out)
  
  ::google::assistant::embedded::v1alpha2::DialogStateOut* temp = dialog_state_out_;
  dialog_state_out_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DialogStateOut* AssistResponse::_internal_mutable_dialog_state_out() {
  
  if (dialog_state_out_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DialogStateOut>(GetArenaForAllocation());
    dialog_state_out_ = p;
  }
  return dialog_state_out_;
}
inline ::google::assistant::embedded::v1alpha2::DialogStateOut* AssistResponse::mutable_dialog_state_out() {
  ::google::assistant::embedded::v1alpha2::DialogStateOut* _msg = _internal_mutable_dialog_state_out();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.dialog_state_out)
  return _msg;
}
inline void AssistResponse::set_allocated_dialog_state_out(::google::assistant::embedded::v1alpha2::DialogStateOut* dialog_state_out) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dialog_state_out_;
  }
  if (dialog_state_out) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::DialogStateOut>::GetOwningArena(dialog_state_out);
    if (message_arena != submessage_arena) {
      dialog_state_out = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dialog_state_out, submessage_arena);
    }
    
  } else {
    
  }
  dialog_state_out_ = dialog_state_out;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.dialog_state_out)
}

// .google.assistant.embedded.v1alpha2.DebugInfo debug_info = 8;
inline bool AssistResponse::_internal_has_debug_info() const {
  return this != internal_default_instance() && debug_info_ != nullptr;
}
inline bool AssistResponse::has_debug_info() const {
  return _internal_has_debug_info();
}
inline void AssistResponse::clear_debug_info() {
  if (GetArenaForAllocation() == nullptr && debug_info_ != nullptr) {
    delete debug_info_;
  }
  debug_info_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::DebugInfo& AssistResponse::_internal_debug_info() const {
  const ::google::assistant::embedded::v1alpha2::DebugInfo* p = debug_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DebugInfo&>(
      ::google::assistant::embedded::v1alpha2::_DebugInfo_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::DebugInfo& AssistResponse::debug_info() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.debug_info)
  return _internal_debug_info();
}
inline void AssistResponse::unsafe_arena_set_allocated_debug_info(
    ::google::assistant::embedded::v1alpha2::DebugInfo* debug_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_info_);
  }
  debug_info_ = debug_info;
  if (debug_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.debug_info)
}
inline ::google::assistant::embedded::v1alpha2::DebugInfo* AssistResponse::release_debug_info() {
  
  ::google::assistant::embedded::v1alpha2::DebugInfo* temp = debug_info_;
  debug_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DebugInfo* AssistResponse::unsafe_arena_release_debug_info() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistResponse.debug_info)
  
  ::google::assistant::embedded::v1alpha2::DebugInfo* temp = debug_info_;
  debug_info_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DebugInfo* AssistResponse::_internal_mutable_debug_info() {
  
  if (debug_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DebugInfo>(GetArenaForAllocation());
    debug_info_ = p;
  }
  return debug_info_;
}
inline ::google::assistant::embedded::v1alpha2::DebugInfo* AssistResponse::mutable_debug_info() {
  ::google::assistant::embedded::v1alpha2::DebugInfo* _msg = _internal_mutable_debug_info();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.debug_info)
  return _msg;
}
inline void AssistResponse::set_allocated_debug_info(::google::assistant::embedded::v1alpha2::DebugInfo* debug_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete debug_info_;
  }
  if (debug_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::DebugInfo>::GetOwningArena(debug_info);
    if (message_arena != submessage_arena) {
      debug_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_info, submessage_arena);
    }
    
  } else {
    
  }
  debug_info_ = debug_info;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.debug_info)
}

// -------------------------------------------------------------------

// DebugInfo

// string aog_agent_to_assistant_json = 1;
inline void DebugInfo::clear_aog_agent_to_assistant_json() {
  aog_agent_to_assistant_json_.ClearToEmpty();
}
inline const std::string& DebugInfo::aog_agent_to_assistant_json() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
  return _internal_aog_agent_to_assistant_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DebugInfo::set_aog_agent_to_assistant_json(ArgT0&& arg0, ArgT... args) {
 
 aog_agent_to_assistant_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
}
inline std::string* DebugInfo::mutable_aog_agent_to_assistant_json() {
  std::string* _s = _internal_mutable_aog_agent_to_assistant_json();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
  return _s;
}
inline const std::string& DebugInfo::_internal_aog_agent_to_assistant_json() const {
  return aog_agent_to_assistant_json_.Get();
}
inline void DebugInfo::_internal_set_aog_agent_to_assistant_json(const std::string& value) {
  
  aog_agent_to_assistant_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DebugInfo::_internal_mutable_aog_agent_to_assistant_json() {
  
  return aog_agent_to_assistant_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DebugInfo::release_aog_agent_to_assistant_json() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
  return aog_agent_to_assistant_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DebugInfo::set_allocated_aog_agent_to_assistant_json(std::string* aog_agent_to_assistant_json) {
  if (aog_agent_to_assistant_json != nullptr) {
    
  } else {
    
  }
  aog_agent_to_assistant_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aog_agent_to_assistant_json,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
}

// -------------------------------------------------------------------

// AssistConfig

// .google.assistant.embedded.v1alpha2.AudioInConfig audio_in_config = 1;
inline bool AssistConfig::_internal_has_audio_in_config() const {
  return type_case() == kAudioInConfig;
}
inline bool AssistConfig::has_audio_in_config() const {
  return _internal_has_audio_in_config();
}
inline void AssistConfig::set_has_audio_in_config() {
  _oneof_case_[0] = kAudioInConfig;
}
inline void AssistConfig::clear_audio_in_config() {
  if (_internal_has_audio_in_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.audio_in_config_;
    }
    clear_has_type();
  }
}
inline ::google::assistant::embedded::v1alpha2::AudioInConfig* AssistConfig::release_audio_in_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.audio_in_config)
  if (_internal_has_audio_in_config()) {
    clear_has_type();
      ::google::assistant::embedded::v1alpha2::AudioInConfig* temp = type_.audio_in_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.audio_in_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::assistant::embedded::v1alpha2::AudioInConfig& AssistConfig::_internal_audio_in_config() const {
  return _internal_has_audio_in_config()
      ? *type_.audio_in_config_
      : reinterpret_cast< ::google::assistant::embedded::v1alpha2::AudioInConfig&>(::google::assistant::embedded::v1alpha2::_AudioInConfig_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::AudioInConfig& AssistConfig::audio_in_config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.audio_in_config)
  return _internal_audio_in_config();
}
inline ::google::assistant::embedded::v1alpha2::AudioInConfig* AssistConfig::unsafe_arena_release_audio_in_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.assistant.embedded.v1alpha2.AssistConfig.audio_in_config)
  if (_internal_has_audio_in_config()) {
    clear_has_type();
    ::google::assistant::embedded::v1alpha2::AudioInConfig* temp = type_.audio_in_config_;
    type_.audio_in_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssistConfig::unsafe_arena_set_allocated_audio_in_config(::google::assistant::embedded::v1alpha2::AudioInConfig* audio_in_config) {
  clear_type();
  if (audio_in_config) {
    set_has_audio_in_config();
    type_.audio_in_config_ = audio_in_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.audio_in_config)
}
inline ::google::assistant::embedded::v1alpha2::AudioInConfig* AssistConfig::_internal_mutable_audio_in_config() {
  if (!_internal_has_audio_in_config()) {
    clear_type();
    set_has_audio_in_config();
    type_.audio_in_config_ = CreateMaybeMessage< ::google::assistant::embedded::v1alpha2::AudioInConfig >(GetArenaForAllocation());
  }
  return type_.audio_in_config_;
}
inline ::google::assistant::embedded::v1alpha2::AudioInConfig* AssistConfig::mutable_audio_in_config() {
  ::google::assistant::embedded::v1alpha2::AudioInConfig* _msg = _internal_mutable_audio_in_config();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.audio_in_config)
  return _msg;
}

// string text_query = 6;
inline bool AssistConfig::_internal_has_text_query() const {
  return type_case() == kTextQuery;
}
inline bool AssistConfig::has_text_query() const {
  return _internal_has_text_query();
}
inline void AssistConfig::set_has_text_query() {
  _oneof_case_[0] = kTextQuery;
}
inline void AssistConfig::clear_text_query() {
  if (_internal_has_text_query()) {
    type_.text_query_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_type();
  }
}
inline const std::string& AssistConfig::text_query() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
  return _internal_text_query();
}
template <typename ArgT0, typename... ArgT>
inline void AssistConfig::set_text_query(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_text_query()) {
    clear_type();
    set_has_text_query();
    type_.text_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.text_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
}
inline std::string* AssistConfig::mutable_text_query() {
  std::string* _s = _internal_mutable_text_query();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
  return _s;
}
inline const std::string& AssistConfig::_internal_text_query() const {
  if (_internal_has_text_query()) {
    return type_.text_query_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AssistConfig::_internal_set_text_query(const std::string& value) {
  if (!_internal_has_text_query()) {
    clear_type();
    set_has_text_query();
    type_.text_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.text_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssistConfig::_internal_mutable_text_query() {
  if (!_internal_has_text_query()) {
    clear_type();
    set_has_text_query();
    type_.text_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return type_.text_query_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssistConfig::release_text_query() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
  if (_internal_has_text_query()) {
    clear_has_type();
    return type_.text_query_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void AssistConfig::set_allocated_text_query(std::string* text_query) {
  if (has_type()) {
    clear_type();
  }
  if (text_query != nullptr) {
    set_has_text_query();
    type_.text_query_.UnsafeSetDefault(text_query);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(text_query);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
}

// .google.assistant.embedded.v1alpha2.AudioOutConfig audio_out_config = 2;
inline bool AssistConfig::_internal_has_audio_out_config() const {
  return this != internal_default_instance() && audio_out_config_ != nullptr;
}
inline bool AssistConfig::has_audio_out_config() const {
  return _internal_has_audio_out_config();
}
inline void AssistConfig::clear_audio_out_config() {
  if (GetArenaForAllocation() == nullptr && audio_out_config_ != nullptr) {
    delete audio_out_config_;
  }
  audio_out_config_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::AudioOutConfig& AssistConfig::_internal_audio_out_config() const {
  const ::google::assistant::embedded::v1alpha2::AudioOutConfig* p = audio_out_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::AudioOutConfig&>(
      ::google::assistant::embedded::v1alpha2::_AudioOutConfig_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::AudioOutConfig& AssistConfig::audio_out_config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.audio_out_config)
  return _internal_audio_out_config();
}
inline void AssistConfig::unsafe_arena_set_allocated_audio_out_config(
    ::google::assistant::embedded::v1alpha2::AudioOutConfig* audio_out_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_out_config_);
  }
  audio_out_config_ = audio_out_config;
  if (audio_out_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.audio_out_config)
}
inline ::google::assistant::embedded::v1alpha2::AudioOutConfig* AssistConfig::release_audio_out_config() {
  
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* temp = audio_out_config_;
  audio_out_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::AudioOutConfig* AssistConfig::unsafe_arena_release_audio_out_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.audio_out_config)
  
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* temp = audio_out_config_;
  audio_out_config_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::AudioOutConfig* AssistConfig::_internal_mutable_audio_out_config() {
  
  if (audio_out_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AudioOutConfig>(GetArenaForAllocation());
    audio_out_config_ = p;
  }
  return audio_out_config_;
}
inline ::google::assistant::embedded::v1alpha2::AudioOutConfig* AssistConfig::mutable_audio_out_config() {
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* _msg = _internal_mutable_audio_out_config();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.audio_out_config)
  return _msg;
}
inline void AssistConfig::set_allocated_audio_out_config(::google::assistant::embedded::v1alpha2::AudioOutConfig* audio_out_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete audio_out_config_;
  }
  if (audio_out_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::AudioOutConfig>::GetOwningArena(audio_out_config);
    if (message_arena != submessage_arena) {
      audio_out_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_out_config, submessage_arena);
    }
    
  } else {
    
  }
  audio_out_config_ = audio_out_config;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.audio_out_config)
}

// .google.assistant.embedded.v1alpha2.ScreenOutConfig screen_out_config = 8;
inline bool AssistConfig::_internal_has_screen_out_config() const {
  return this != internal_default_instance() && screen_out_config_ != nullptr;
}
inline bool AssistConfig::has_screen_out_config() const {
  return _internal_has_screen_out_config();
}
inline void AssistConfig::clear_screen_out_config() {
  if (GetArenaForAllocation() == nullptr && screen_out_config_ != nullptr) {
    delete screen_out_config_;
  }
  screen_out_config_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::ScreenOutConfig& AssistConfig::_internal_screen_out_config() const {
  const ::google::assistant::embedded::v1alpha2::ScreenOutConfig* p = screen_out_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::ScreenOutConfig&>(
      ::google::assistant::embedded::v1alpha2::_ScreenOutConfig_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::ScreenOutConfig& AssistConfig::screen_out_config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.screen_out_config)
  return _internal_screen_out_config();
}
inline void AssistConfig::unsafe_arena_set_allocated_screen_out_config(
    ::google::assistant::embedded::v1alpha2::ScreenOutConfig* screen_out_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screen_out_config_);
  }
  screen_out_config_ = screen_out_config;
  if (screen_out_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.screen_out_config)
}
inline ::google::assistant::embedded::v1alpha2::ScreenOutConfig* AssistConfig::release_screen_out_config() {
  
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* temp = screen_out_config_;
  screen_out_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOutConfig* AssistConfig::unsafe_arena_release_screen_out_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.screen_out_config)
  
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* temp = screen_out_config_;
  screen_out_config_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOutConfig* AssistConfig::_internal_mutable_screen_out_config() {
  
  if (screen_out_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::ScreenOutConfig>(GetArenaForAllocation());
    screen_out_config_ = p;
  }
  return screen_out_config_;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOutConfig* AssistConfig::mutable_screen_out_config() {
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* _msg = _internal_mutable_screen_out_config();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.screen_out_config)
  return _msg;
}
inline void AssistConfig::set_allocated_screen_out_config(::google::assistant::embedded::v1alpha2::ScreenOutConfig* screen_out_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete screen_out_config_;
  }
  if (screen_out_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::ScreenOutConfig>::GetOwningArena(screen_out_config);
    if (message_arena != submessage_arena) {
      screen_out_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_out_config, submessage_arena);
    }
    
  } else {
    
  }
  screen_out_config_ = screen_out_config;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.screen_out_config)
}

// .google.assistant.embedded.v1alpha2.DialogStateIn dialog_state_in = 3;
inline bool AssistConfig::_internal_has_dialog_state_in() const {
  return this != internal_default_instance() && dialog_state_in_ != nullptr;
}
inline bool AssistConfig::has_dialog_state_in() const {
  return _internal_has_dialog_state_in();
}
inline void AssistConfig::clear_dialog_state_in() {
  if (GetArenaForAllocation() == nullptr && dialog_state_in_ != nullptr) {
    delete dialog_state_in_;
  }
  dialog_state_in_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::DialogStateIn& AssistConfig::_internal_dialog_state_in() const {
  const ::google::assistant::embedded::v1alpha2::DialogStateIn* p = dialog_state_in_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DialogStateIn&>(
      ::google::assistant::embedded::v1alpha2::_DialogStateIn_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::DialogStateIn& AssistConfig::dialog_state_in() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.dialog_state_in)
  return _internal_dialog_state_in();
}
inline void AssistConfig::unsafe_arena_set_allocated_dialog_state_in(
    ::google::assistant::embedded::v1alpha2::DialogStateIn* dialog_state_in) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dialog_state_in_);
  }
  dialog_state_in_ = dialog_state_in;
  if (dialog_state_in) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.dialog_state_in)
}
inline ::google::assistant::embedded::v1alpha2::DialogStateIn* AssistConfig::release_dialog_state_in() {
  
  ::google::assistant::embedded::v1alpha2::DialogStateIn* temp = dialog_state_in_;
  dialog_state_in_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DialogStateIn* AssistConfig::unsafe_arena_release_dialog_state_in() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.dialog_state_in)
  
  ::google::assistant::embedded::v1alpha2::DialogStateIn* temp = dialog_state_in_;
  dialog_state_in_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DialogStateIn* AssistConfig::_internal_mutable_dialog_state_in() {
  
  if (dialog_state_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DialogStateIn>(GetArenaForAllocation());
    dialog_state_in_ = p;
  }
  return dialog_state_in_;
}
inline ::google::assistant::embedded::v1alpha2::DialogStateIn* AssistConfig::mutable_dialog_state_in() {
  ::google::assistant::embedded::v1alpha2::DialogStateIn* _msg = _internal_mutable_dialog_state_in();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.dialog_state_in)
  return _msg;
}
inline void AssistConfig::set_allocated_dialog_state_in(::google::assistant::embedded::v1alpha2::DialogStateIn* dialog_state_in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dialog_state_in_;
  }
  if (dialog_state_in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::DialogStateIn>::GetOwningArena(dialog_state_in);
    if (message_arena != submessage_arena) {
      dialog_state_in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dialog_state_in, submessage_arena);
    }
    
  } else {
    
  }
  dialog_state_in_ = dialog_state_in;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.dialog_state_in)
}

// .google.assistant.embedded.v1alpha2.DeviceConfig device_config = 4;
inline bool AssistConfig::_internal_has_device_config() const {
  return this != internal_default_instance() && device_config_ != nullptr;
}
inline bool AssistConfig::has_device_config() const {
  return _internal_has_device_config();
}
inline void AssistConfig::clear_device_config() {
  if (GetArenaForAllocation() == nullptr && device_config_ != nullptr) {
    delete device_config_;
  }
  device_config_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::DeviceConfig& AssistConfig::_internal_device_config() const {
  const ::google::assistant::embedded::v1alpha2::DeviceConfig* p = device_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DeviceConfig&>(
      ::google::assistant::embedded::v1alpha2::_DeviceConfig_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::DeviceConfig& AssistConfig::device_config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.device_config)
  return _internal_device_config();
}
inline void AssistConfig::unsafe_arena_set_allocated_device_config(
    ::google::assistant::embedded::v1alpha2::DeviceConfig* device_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_config_);
  }
  device_config_ = device_config;
  if (device_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.device_config)
}
inline ::google::assistant::embedded::v1alpha2::DeviceConfig* AssistConfig::release_device_config() {
  
  ::google::assistant::embedded::v1alpha2::DeviceConfig* temp = device_config_;
  device_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DeviceConfig* AssistConfig::unsafe_arena_release_device_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.device_config)
  
  ::google::assistant::embedded::v1alpha2::DeviceConfig* temp = device_config_;
  device_config_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DeviceConfig* AssistConfig::_internal_mutable_device_config() {
  
  if (device_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceConfig>(GetArenaForAllocation());
    device_config_ = p;
  }
  return device_config_;
}
inline ::google::assistant::embedded::v1alpha2::DeviceConfig* AssistConfig::mutable_device_config() {
  ::google::assistant::embedded::v1alpha2::DeviceConfig* _msg = _internal_mutable_device_config();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.device_config)
  return _msg;
}
inline void AssistConfig::set_allocated_device_config(::google::assistant::embedded::v1alpha2::DeviceConfig* device_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_config_;
  }
  if (device_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::DeviceConfig>::GetOwningArena(device_config);
    if (message_arena != submessage_arena) {
      device_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_config, submessage_arena);
    }
    
  } else {
    
  }
  device_config_ = device_config;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.device_config)
}

// .google.assistant.embedded.v1alpha2.DebugConfig debug_config = 5;
inline bool AssistConfig::_internal_has_debug_config() const {
  return this != internal_default_instance() && debug_config_ != nullptr;
}
inline bool AssistConfig::has_debug_config() const {
  return _internal_has_debug_config();
}
inline void AssistConfig::clear_debug_config() {
  if (GetArenaForAllocation() == nullptr && debug_config_ != nullptr) {
    delete debug_config_;
  }
  debug_config_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::DebugConfig& AssistConfig::_internal_debug_config() const {
  const ::google::assistant::embedded::v1alpha2::DebugConfig* p = debug_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DebugConfig&>(
      ::google::assistant::embedded::v1alpha2::_DebugConfig_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::DebugConfig& AssistConfig::debug_config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.debug_config)
  return _internal_debug_config();
}
inline void AssistConfig::unsafe_arena_set_allocated_debug_config(
    ::google::assistant::embedded::v1alpha2::DebugConfig* debug_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_config_);
  }
  debug_config_ = debug_config;
  if (debug_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.debug_config)
}
inline ::google::assistant::embedded::v1alpha2::DebugConfig* AssistConfig::release_debug_config() {
  
  ::google::assistant::embedded::v1alpha2::DebugConfig* temp = debug_config_;
  debug_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DebugConfig* AssistConfig::unsafe_arena_release_debug_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.debug_config)
  
  ::google::assistant::embedded::v1alpha2::DebugConfig* temp = debug_config_;
  debug_config_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DebugConfig* AssistConfig::_internal_mutable_debug_config() {
  
  if (debug_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DebugConfig>(GetArenaForAllocation());
    debug_config_ = p;
  }
  return debug_config_;
}
inline ::google::assistant::embedded::v1alpha2::DebugConfig* AssistConfig::mutable_debug_config() {
  ::google::assistant::embedded::v1alpha2::DebugConfig* _msg = _internal_mutable_debug_config();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.debug_config)
  return _msg;
}
inline void AssistConfig::set_allocated_debug_config(::google::assistant::embedded::v1alpha2::DebugConfig* debug_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete debug_config_;
  }
  if (debug_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::DebugConfig>::GetOwningArena(debug_config);
    if (message_arena != submessage_arena) {
      debug_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_config, submessage_arena);
    }
    
  } else {
    
  }
  debug_config_ = debug_config;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.debug_config)
}

inline bool AssistConfig::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void AssistConfig::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline AssistConfig::TypeCase AssistConfig::type_case() const {
  return AssistConfig::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AudioInConfig

// .google.assistant.embedded.v1alpha2.AudioInConfig.Encoding encoding = 1;
inline void AudioInConfig::clear_encoding() {
  encoding_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding AudioInConfig::_internal_encoding() const {
  return static_cast< ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding >(encoding_);
}
inline ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding AudioInConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioInConfig.encoding)
  return _internal_encoding();
}
inline void AudioInConfig::_internal_set_encoding(::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding value) {
  
  encoding_ = value;
}
inline void AudioInConfig::set_encoding(::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioInConfig.encoding)
}

// int32 sample_rate_hertz = 2;
inline void AudioInConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioInConfig::_internal_sample_rate_hertz() const {
  return sample_rate_hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioInConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioInConfig.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void AudioInConfig::_internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sample_rate_hertz_ = value;
}
inline void AudioInConfig::set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioInConfig.sample_rate_hertz)
}

// -------------------------------------------------------------------

// AudioOutConfig

// .google.assistant.embedded.v1alpha2.AudioOutConfig.Encoding encoding = 1;
inline void AudioOutConfig::clear_encoding() {
  encoding_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding AudioOutConfig::_internal_encoding() const {
  return static_cast< ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding >(encoding_);
}
inline ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding AudioOutConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioOutConfig.encoding)
  return _internal_encoding();
}
inline void AudioOutConfig::_internal_set_encoding(::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding value) {
  
  encoding_ = value;
}
inline void AudioOutConfig::set_encoding(::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioOutConfig.encoding)
}

// int32 sample_rate_hertz = 2;
inline void AudioOutConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioOutConfig::_internal_sample_rate_hertz() const {
  return sample_rate_hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioOutConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioOutConfig.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void AudioOutConfig::_internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sample_rate_hertz_ = value;
}
inline void AudioOutConfig::set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioOutConfig.sample_rate_hertz)
}

// int32 volume_percentage = 3;
inline void AudioOutConfig::clear_volume_percentage() {
  volume_percentage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioOutConfig::_internal_volume_percentage() const {
  return volume_percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioOutConfig::volume_percentage() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioOutConfig.volume_percentage)
  return _internal_volume_percentage();
}
inline void AudioOutConfig::_internal_set_volume_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_percentage_ = value;
}
inline void AudioOutConfig::set_volume_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_percentage(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioOutConfig.volume_percentage)
}

// -------------------------------------------------------------------

// ScreenOutConfig

// .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;
inline void ScreenOutConfig::clear_screen_mode() {
  screen_mode_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode ScreenOutConfig::_internal_screen_mode() const {
  return static_cast< ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode >(screen_mode_);
}
inline ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode ScreenOutConfig::screen_mode() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.ScreenOutConfig.screen_mode)
  return _internal_screen_mode();
}
inline void ScreenOutConfig::_internal_set_screen_mode(::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode value) {
  
  screen_mode_ = value;
}
inline void ScreenOutConfig::set_screen_mode(::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode value) {
  _internal_set_screen_mode(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.ScreenOutConfig.screen_mode)
}

// -------------------------------------------------------------------

// DialogStateIn

// bytes conversation_state = 1;
inline void DialogStateIn::clear_conversation_state() {
  conversation_state_.ClearToEmpty();
}
inline const std::string& DialogStateIn::conversation_state() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
  return _internal_conversation_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DialogStateIn::set_conversation_state(ArgT0&& arg0, ArgT... args) {
 
 conversation_state_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
}
inline std::string* DialogStateIn::mutable_conversation_state() {
  std::string* _s = _internal_mutable_conversation_state();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
  return _s;
}
inline const std::string& DialogStateIn::_internal_conversation_state() const {
  return conversation_state_.Get();
}
inline void DialogStateIn::_internal_set_conversation_state(const std::string& value) {
  
  conversation_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DialogStateIn::_internal_mutable_conversation_state() {
  
  return conversation_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DialogStateIn::release_conversation_state() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
  return conversation_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DialogStateIn::set_allocated_conversation_state(std::string* conversation_state) {
  if (conversation_state != nullptr) {
    
  } else {
    
  }
  conversation_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conversation_state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
}

// string language_code = 2;
inline void DialogStateIn::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& DialogStateIn::language_code() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DialogStateIn::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
}
inline std::string* DialogStateIn::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
  return _s;
}
inline const std::string& DialogStateIn::_internal_language_code() const {
  return language_code_.Get();
}
inline void DialogStateIn::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DialogStateIn::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DialogStateIn::release_language_code() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DialogStateIn::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
}

// .google.assistant.embedded.v1alpha2.DeviceLocation device_location = 5;
inline bool DialogStateIn::_internal_has_device_location() const {
  return this != internal_default_instance() && device_location_ != nullptr;
}
inline bool DialogStateIn::has_device_location() const {
  return _internal_has_device_location();
}
inline void DialogStateIn::clear_device_location() {
  if (GetArenaForAllocation() == nullptr && device_location_ != nullptr) {
    delete device_location_;
  }
  device_location_ = nullptr;
}
inline const ::google::assistant::embedded::v1alpha2::DeviceLocation& DialogStateIn::_internal_device_location() const {
  const ::google::assistant::embedded::v1alpha2::DeviceLocation* p = device_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DeviceLocation&>(
      ::google::assistant::embedded::v1alpha2::_DeviceLocation_default_instance_);
}
inline const ::google::assistant::embedded::v1alpha2::DeviceLocation& DialogStateIn::device_location() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateIn.device_location)
  return _internal_device_location();
}
inline void DialogStateIn::unsafe_arena_set_allocated_device_location(
    ::google::assistant::embedded::v1alpha2::DeviceLocation* device_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_location_);
  }
  device_location_ = device_location;
  if (device_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.DialogStateIn.device_location)
}
inline ::google::assistant::embedded::v1alpha2::DeviceLocation* DialogStateIn::release_device_location() {
  
  ::google::assistant::embedded::v1alpha2::DeviceLocation* temp = device_location_;
  device_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DeviceLocation* DialogStateIn::unsafe_arena_release_device_location() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DialogStateIn.device_location)
  
  ::google::assistant::embedded::v1alpha2::DeviceLocation* temp = device_location_;
  device_location_ = nullptr;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DeviceLocation* DialogStateIn::_internal_mutable_device_location() {
  
  if (device_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceLocation>(GetArenaForAllocation());
    device_location_ = p;
  }
  return device_location_;
}
inline ::google::assistant::embedded::v1alpha2::DeviceLocation* DialogStateIn::mutable_device_location() {
  ::google::assistant::embedded::v1alpha2::DeviceLocation* _msg = _internal_mutable_device_location();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DialogStateIn.device_location)
  return _msg;
}
inline void DialogStateIn::set_allocated_device_location(::google::assistant::embedded::v1alpha2::DeviceLocation* device_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_location_;
  }
  if (device_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::assistant::embedded::v1alpha2::DeviceLocation>::GetOwningArena(device_location);
    if (message_arena != submessage_arena) {
      device_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_location, submessage_arena);
    }
    
  } else {
    
  }
  device_location_ = device_location;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DialogStateIn.device_location)
}

// bool is_new_conversation = 7;
inline void DialogStateIn::clear_is_new_conversation() {
  is_new_conversation_ = false;
}
inline bool DialogStateIn::_internal_is_new_conversation() const {
  return is_new_conversation_;
}
inline bool DialogStateIn::is_new_conversation() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateIn.is_new_conversation)
  return _internal_is_new_conversation();
}
inline void DialogStateIn::_internal_set_is_new_conversation(bool value) {
  
  is_new_conversation_ = value;
}
inline void DialogStateIn::set_is_new_conversation(bool value) {
  _internal_set_is_new_conversation(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateIn.is_new_conversation)
}

// -------------------------------------------------------------------

// DeviceConfig

// string device_id = 1;
inline void DeviceConfig::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& DeviceConfig::device_id() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceConfig::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
}
inline std::string* DeviceConfig::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
  return _s;
}
inline const std::string& DeviceConfig::_internal_device_id() const {
  return device_id_.Get();
}
inline void DeviceConfig::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceConfig::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceConfig::release_device_id() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceConfig::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
}

// string device_model_id = 3;
inline void DeviceConfig::clear_device_model_id() {
  device_model_id_.ClearToEmpty();
}
inline const std::string& DeviceConfig::device_model_id() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
  return _internal_device_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceConfig::set_device_model_id(ArgT0&& arg0, ArgT... args) {
 
 device_model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
}
inline std::string* DeviceConfig::mutable_device_model_id() {
  std::string* _s = _internal_mutable_device_model_id();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
  return _s;
}
inline const std::string& DeviceConfig::_internal_device_model_id() const {
  return device_model_id_.Get();
}
inline void DeviceConfig::_internal_set_device_model_id(const std::string& value) {
  
  device_model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceConfig::_internal_mutable_device_model_id() {
  
  return device_model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceConfig::release_device_model_id() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
  return device_model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceConfig::set_allocated_device_model_id(std::string* device_model_id) {
  if (device_model_id != nullptr) {
    
  } else {
    
  }
  device_model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_model_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
}

// -------------------------------------------------------------------

// AudioOut

// bytes audio_data = 1;
inline void AudioOut::clear_audio_data() {
  audio_data_.ClearToEmpty();
}
inline const std::string& AudioOut::audio_data() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
  return _internal_audio_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioOut::set_audio_data(ArgT0&& arg0, ArgT... args) {
 
 audio_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
}
inline std::string* AudioOut::mutable_audio_data() {
  std::string* _s = _internal_mutable_audio_data();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
  return _s;
}
inline const std::string& AudioOut::_internal_audio_data() const {
  return audio_data_.Get();
}
inline void AudioOut::_internal_set_audio_data(const std::string& value) {
  
  audio_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AudioOut::_internal_mutable_audio_data() {
  
  return audio_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AudioOut::release_audio_data() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
  return audio_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AudioOut::set_allocated_audio_data(std::string* audio_data) {
  if (audio_data != nullptr) {
    
  } else {
    
  }
  audio_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
}

// -------------------------------------------------------------------

// ScreenOut

// .google.assistant.embedded.v1alpha2.ScreenOut.Format format = 1;
inline void ScreenOut::clear_format() {
  format_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOut_Format ScreenOut::_internal_format() const {
  return static_cast< ::google::assistant::embedded::v1alpha2::ScreenOut_Format >(format_);
}
inline ::google::assistant::embedded::v1alpha2::ScreenOut_Format ScreenOut::format() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.ScreenOut.format)
  return _internal_format();
}
inline void ScreenOut::_internal_set_format(::google::assistant::embedded::v1alpha2::ScreenOut_Format value) {
  
  format_ = value;
}
inline void ScreenOut::set_format(::google::assistant::embedded::v1alpha2::ScreenOut_Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.ScreenOut.format)
}

// bytes data = 2;
inline void ScreenOut::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ScreenOut::data() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.ScreenOut.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScreenOut::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.ScreenOut.data)
}
inline std::string* ScreenOut::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.ScreenOut.data)
  return _s;
}
inline const std::string& ScreenOut::_internal_data() const {
  return data_.Get();
}
inline void ScreenOut::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScreenOut::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScreenOut::release_data() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.ScreenOut.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScreenOut::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.ScreenOut.data)
}

// -------------------------------------------------------------------

// DeviceAction

// string device_request_json = 1;
inline void DeviceAction::clear_device_request_json() {
  device_request_json_.ClearToEmpty();
}
inline const std::string& DeviceAction::device_request_json() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
  return _internal_device_request_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceAction::set_device_request_json(ArgT0&& arg0, ArgT... args) {
 
 device_request_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
}
inline std::string* DeviceAction::mutable_device_request_json() {
  std::string* _s = _internal_mutable_device_request_json();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
  return _s;
}
inline const std::string& DeviceAction::_internal_device_request_json() const {
  return device_request_json_.Get();
}
inline void DeviceAction::_internal_set_device_request_json(const std::string& value) {
  
  device_request_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceAction::_internal_mutable_device_request_json() {
  
  return device_request_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceAction::release_device_request_json() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
  return device_request_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceAction::set_allocated_device_request_json(std::string* device_request_json) {
  if (device_request_json != nullptr) {
    
  } else {
    
  }
  device_request_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_request_json,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
}

// -------------------------------------------------------------------

// SpeechRecognitionResult

// string transcript = 1;
inline void SpeechRecognitionResult::clear_transcript() {
  transcript_.ClearToEmpty();
}
inline const std::string& SpeechRecognitionResult::transcript() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
  return _internal_transcript();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionResult::set_transcript(ArgT0&& arg0, ArgT... args) {
 
 transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
}
inline std::string* SpeechRecognitionResult::mutable_transcript() {
  std::string* _s = _internal_mutable_transcript();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
  return _s;
}
inline const std::string& SpeechRecognitionResult::_internal_transcript() const {
  return transcript_.Get();
}
inline void SpeechRecognitionResult::_internal_set_transcript(const std::string& value) {
  
  transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionResult::_internal_mutable_transcript() {
  
  return transcript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionResult::release_transcript() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
  return transcript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SpeechRecognitionResult::set_allocated_transcript(std::string* transcript) {
  if (transcript != nullptr) {
    
  } else {
    
  }
  transcript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
}

// float stability = 2;
inline void SpeechRecognitionResult::clear_stability() {
  stability_ = 0;
}
inline float SpeechRecognitionResult::_internal_stability() const {
  return stability_;
}
inline float SpeechRecognitionResult::stability() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.stability)
  return _internal_stability();
}
inline void SpeechRecognitionResult::_internal_set_stability(float value) {
  
  stability_ = value;
}
inline void SpeechRecognitionResult::set_stability(float value) {
  _internal_set_stability(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.stability)
}

// -------------------------------------------------------------------

// DialogStateOut

// string supplemental_display_text = 1;
inline void DialogStateOut::clear_supplemental_display_text() {
  supplemental_display_text_.ClearToEmpty();
}
inline const std::string& DialogStateOut::supplemental_display_text() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
  return _internal_supplemental_display_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DialogStateOut::set_supplemental_display_text(ArgT0&& arg0, ArgT... args) {
 
 supplemental_display_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
}
inline std::string* DialogStateOut::mutable_supplemental_display_text() {
  std::string* _s = _internal_mutable_supplemental_display_text();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
  return _s;
}
inline const std::string& DialogStateOut::_internal_supplemental_display_text() const {
  return supplemental_display_text_.Get();
}
inline void DialogStateOut::_internal_set_supplemental_display_text(const std::string& value) {
  
  supplemental_display_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DialogStateOut::_internal_mutable_supplemental_display_text() {
  
  return supplemental_display_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DialogStateOut::release_supplemental_display_text() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
  return supplemental_display_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DialogStateOut::set_allocated_supplemental_display_text(std::string* supplemental_display_text) {
  if (supplemental_display_text != nullptr) {
    
  } else {
    
  }
  supplemental_display_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supplemental_display_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
}

// bytes conversation_state = 2;
inline void DialogStateOut::clear_conversation_state() {
  conversation_state_.ClearToEmpty();
}
inline const std::string& DialogStateOut::conversation_state() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
  return _internal_conversation_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DialogStateOut::set_conversation_state(ArgT0&& arg0, ArgT... args) {
 
 conversation_state_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
}
inline std::string* DialogStateOut::mutable_conversation_state() {
  std::string* _s = _internal_mutable_conversation_state();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
  return _s;
}
inline const std::string& DialogStateOut::_internal_conversation_state() const {
  return conversation_state_.Get();
}
inline void DialogStateOut::_internal_set_conversation_state(const std::string& value) {
  
  conversation_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DialogStateOut::_internal_mutable_conversation_state() {
  
  return conversation_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DialogStateOut::release_conversation_state() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
  return conversation_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DialogStateOut::set_allocated_conversation_state(std::string* conversation_state) {
  if (conversation_state != nullptr) {
    
  } else {
    
  }
  conversation_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conversation_state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
}

// .google.assistant.embedded.v1alpha2.DialogStateOut.MicrophoneMode microphone_mode = 3;
inline void DialogStateOut::clear_microphone_mode() {
  microphone_mode_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode DialogStateOut::_internal_microphone_mode() const {
  return static_cast< ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode >(microphone_mode_);
}
inline ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode DialogStateOut::microphone_mode() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateOut.microphone_mode)
  return _internal_microphone_mode();
}
inline void DialogStateOut::_internal_set_microphone_mode(::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode value) {
  
  microphone_mode_ = value;
}
inline void DialogStateOut::set_microphone_mode(::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode value) {
  _internal_set_microphone_mode(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateOut.microphone_mode)
}

// int32 volume_percentage = 4;
inline void DialogStateOut::clear_volume_percentage() {
  volume_percentage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DialogStateOut::_internal_volume_percentage() const {
  return volume_percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DialogStateOut::volume_percentage() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateOut.volume_percentage)
  return _internal_volume_percentage();
}
inline void DialogStateOut::_internal_set_volume_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_percentage_ = value;
}
inline void DialogStateOut::set_volume_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_percentage(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateOut.volume_percentage)
}

// -------------------------------------------------------------------

// DebugConfig

// bool return_debug_info = 6;
inline void DebugConfig::clear_return_debug_info() {
  return_debug_info_ = false;
}
inline bool DebugConfig::_internal_return_debug_info() const {
  return return_debug_info_;
}
inline bool DebugConfig::return_debug_info() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DebugConfig.return_debug_info)
  return _internal_return_debug_info();
}
inline void DebugConfig::_internal_set_return_debug_info(bool value) {
  
  return_debug_info_ = value;
}
inline void DebugConfig::set_return_debug_info(bool value) {
  _internal_set_return_debug_info(value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DebugConfig.return_debug_info)
}

// -------------------------------------------------------------------

// DeviceLocation

// .google.type.LatLng coordinates = 1;
inline bool DeviceLocation::_internal_has_coordinates() const {
  return type_case() == kCoordinates;
}
inline bool DeviceLocation::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void DeviceLocation::set_has_coordinates() {
  _oneof_case_[0] = kCoordinates;
}
inline ::google::type::LatLng* DeviceLocation::release_coordinates() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DeviceLocation.coordinates)
  if (_internal_has_coordinates()) {
    clear_has_type();
      ::google::type::LatLng* temp = type_.coordinates_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.coordinates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::type::LatLng& DeviceLocation::_internal_coordinates() const {
  return _internal_has_coordinates()
      ? *type_.coordinates_
      : reinterpret_cast< ::google::type::LatLng&>(::google::type::_LatLng_default_instance_);
}
inline const ::google::type::LatLng& DeviceLocation::coordinates() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DeviceLocation.coordinates)
  return _internal_coordinates();
}
inline ::google::type::LatLng* DeviceLocation::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.assistant.embedded.v1alpha2.DeviceLocation.coordinates)
  if (_internal_has_coordinates()) {
    clear_has_type();
    ::google::type::LatLng* temp = type_.coordinates_;
    type_.coordinates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeviceLocation::unsafe_arena_set_allocated_coordinates(::google::type::LatLng* coordinates) {
  clear_type();
  if (coordinates) {
    set_has_coordinates();
    type_.coordinates_ = coordinates;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.assistant.embedded.v1alpha2.DeviceLocation.coordinates)
}
inline ::google::type::LatLng* DeviceLocation::_internal_mutable_coordinates() {
  if (!_internal_has_coordinates()) {
    clear_type();
    set_has_coordinates();
    type_.coordinates_ = CreateMaybeMessage< ::google::type::LatLng >(GetArenaForAllocation());
  }
  return type_.coordinates_;
}
inline ::google::type::LatLng* DeviceLocation::mutable_coordinates() {
  ::google::type::LatLng* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DeviceLocation.coordinates)
  return _msg;
}

inline bool DeviceLocation::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void DeviceLocation::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline DeviceLocation::TypeCase DeviceLocation::type_case() const {
  return DeviceLocation::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha2
}  // namespace embedded
}  // namespace assistant
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::AssistResponse_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::AssistResponse_EventType>() {
  return ::google::assistant::embedded::v1alpha2::AssistResponse_EventType_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding>() {
  return ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding>() {
  return ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode>() {
  return ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::ScreenOut_Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::ScreenOut_Format>() {
  return ::google::assistant::embedded::v1alpha2::ScreenOut_Format_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode>() {
  return ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto
